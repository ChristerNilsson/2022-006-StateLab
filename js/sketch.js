// Generated by CoffeeScript 2.5.1
var Button, Editor, LeftOrRight, LeftPaused, LeftTicking, RightPaused, RightTicking, StartState, State, buttons, currState, draw, editor, leftOrRight, leftPaused, leftTicking, mouseClicked, rightPaused, rightTicking, setup, startState;

buttons = {};

currState = null;

startState = null;

leftOrRight = null;

leftTicking = null;

rightTicking = null;

leftPaused = null;

rightPaused = null;

editor = null;

Button = class Button {
  constructor(text1, x, y, w, h, bg, fg) {
    this.text = text1;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.bg = bg;
    this.fg = fg;
    this.enabled = true;
  }

  draw() {
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

  inside() {
    return (this.x - this.w / 2 <= mouseX && mouseX <= this.x + this.w / 2) && (this.y - this.h / 2 <= mouseY && mouseY <= this.y + this.h / 2);
  }

};

State = class State {
  constructor() {
    this.transitions = {};
  }

  getButtons(names) {
    var i, key, len, ref, result;
    result = {};
    ref = names.split(' ');
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (key in buttons) {
        result[key] = buttons[key];
      } else {
        console.log('missing button:', key);
      }
    }
    return result;
  }

  message(key) {
    var transition;
    if (key in this.transitions) {
      transition = this.transitions[key];
      return currState = transition;
    } else {
      return console.log('missing transition:', key);
    }
  }

};

//##################################
StartState = class StartState extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('left right play new');
  }

  setTransitions() {
    this.transitions['play'] = leftOrRight;
    return this.transitions['new'] = editor;
  }

};

LeftOrRight = class LeftOrRight extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('left right pause');
  }

  setTransitions() {
    this.transitions['pause'] = startState;
    this.transitions['left'] = rightTicking;
    return this.transitions['right'] = leftTicking;
  }

};

LeftTicking = class LeftTicking extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('left right pause');
  }

  setTransitions() {
    this.transitions['left'] = rightTicking;
    return this.transitions['pause'] = leftPaused;
  }

};

RightTicking = class RightTicking extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('left right pause');
  }

  setTransitions() {
    this.transitions['right'] = leftTicking;
    return this.transitions['pause'] = rightPaused;
  }

};

LeftPaused = class LeftPaused extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('left right play new');
  }

  setTransitions() {
    this.transitions['play'] = leftTicking;
    return this.transitions['new'] = editor;
  }

};

RightPaused = class RightPaused extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('left right play new');
  }

  setTransitions() {
    this.transitions['play'] = rightTicking;
    return this.transitions['new'] = editor;
  }

};

Editor = class Editor extends State {
  constructor(name) {
    super();
    this.name = name;
    this.buttons = this.getButtons('ok');
  }

  setTransitions() {
    return this.transitions['ok'] = startState;
  }

};

setup = function() {
  createCanvas(300, 300);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  buttons['left'] = new Button('left', 150, 50, 300, 100, 'white', 'black');
  buttons['right'] = new Button('right', 150, 250, 300, 100, 'red', 'black');
  buttons['play'] = new Button('play', 50, 150, 100, 100, 'yellow', 'black');
  buttons['pause'] = new Button('pause', 50, 150, 100, 100, 'green', 'white');
  buttons['new'] = new Button('new', 250, 150, 100, 100, 'pink', 'black');
  buttons['ok'] = new Button('ok', 150, 250, 100, 100, 'white', 'black');
  startState = new StartState('startState');
  leftOrRight = new LeftOrRight('leftOrRight');
  editor = new Editor('Editor');
  leftTicking = new LeftTicking('leftTicking');
  rightTicking = new RightTicking('rightTicking');
  leftPaused = new LeftPaused('leftPaused');
  rightPaused = new RightPaused('rightPaused');
  startState.setTransitions();
  leftOrRight.setTransitions();
  editor.setTransitions();
  leftTicking.setTransitions();
  rightTicking.setTransitions();
  leftPaused.setTransitions();
  rightPaused.setTransitions();
  currState = startState;
  return console.log(currState);
};

draw = function() {
  var button, key, results;
  background('black');
  fill('White');
  text(currState.name, 150, 150);
  results = [];
  for (key in currState.buttons) {
    if (key in buttons) {
      button = buttons[key];
      results.push(button.draw());
    } else {
      results.push(console.log('missing button:', key));
    }
  }
  return results;
};

mouseClicked = function() {
  var button, key, results;
  results = [];
  for (key in currState.buttons) {
    button = buttons[key];
    if (button.inside(mouseX, mouseY)) {
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-006-StateLab\coffee\sketch.coffee