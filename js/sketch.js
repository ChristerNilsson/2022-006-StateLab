// Generated by CoffeeScript 2.5.1
var Button, ColorButton, DeadButton, EditButton, Editor, HOUR, ImageButton, LeftOrRight, LeftPaused, LeftTicking, MINUTE, RightPaused, RightTicking, RotateButton, StartState, State, WelcomeState, buttons, createState, currState, d2, draw, hms, makeEditButtons, mouseClicked, preload, pretty, qr, round3, setup, states, timeout,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HOUR = 3600;

MINUTE = 60;

buttons = {};

states = {};

qr = null;

timeout = [false, false];

currState = null;

Button = class Button {
  constructor(text1, x1, y1, w1, h1, bg1 = 'white', fg1 = 'black') {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg1;
    this.fg = fg1;
  }

  draw(disabled) {
    if (disabled) {
      fill('lightgray');
    } else {
      fill(this.bg);
    }
    rect(this.x, this.y, this.w, this.h);
    textSize(0.06 * height);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

ImageButton = class ImageButton {
  constructor(image1, x1, y1, w1, h1) {
    this.image = image1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
  }

  draw() {
    if (this.image) {
      return image(this.image, (width - this.w) / 2, (height - this.h) / 2, this.w, this.h);
    }
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

RotateButton = class RotateButton extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super('', x, y, w, h, bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = states.Editor.clocks[this.player];
    if (secs === 0) {
      fill('gray');
    }
    [h, m, s] = hms(Math.trunc(secs));
    ss = h >= 1 ? d2(h) + ':' + d2(m) : d2(m) + ':' + d2(s);
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    textSize(0.22 * height);
    fill(this.fg);
    text(ss, 0, 0.017 * height);
    textSize(0.05 * height);
    text('+' + round3(states.Editor.bonuses[this.player]) + 's', 0, 90);
    if (timeout[this.player]) {
      text('Out of time', 0, -90);
    }
    return pop();
  }

};

EditButton = class EditButton extends Button {
  constructor(text, x, y, w, h, fg = 'gray') {
    super(text, x, y, w, h, 'black', fg);
  }

  draw() {
    textSize(0.05 * height);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

DeadButton = class DeadButton extends Button {
  constructor(text, x, y, fg = 'lightgray') {
    super(text, x, y, 0, 0, 'black', fg);
  }

  draw() {
    textSize(0.05 * height);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

ColorButton = class ColorButton extends Button {
  constructor(fg1, x, y) {
    super('', x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(0.04 * height);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(t) {
    var arr, k, key, len, pair, results, target;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      pair = arr[k];
      [key, target] = pair.split('=>');
      results.push(this.transitions[key] = target);
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    if (key in this.transitions) {
      currState = states[this.transitions[key]];
      return currState.patch();
    } else {
      return console.log('missing transition:', key);
    }
  }

  patch() {}

  draw() {}

};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

round3 = function(x) {
  return Math.round(x * 1000) / 1000;
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (h > 0) {
    header += round3(h) + 'h';
  }
  if (m > 0) {
    header += round3(m) + 'm';
  }
  if (s > 0) {
    header += round3(s) + 's';
  }
  return header;
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.log(d2(3), '03');

hms = function(x) {
  var h, m, s;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  return [h, m, s];
};

console.log(hms(180), [0, 3, 0]);

//##################################
WelcomeState = class WelcomeState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('welcome=>StartState');
  }

  message(key) {
    var ok, os;
    if (key === 'welcome') {
      os = navigator.appVersion;
      ok = os.indexOf('Mac') === -1 && os.indexOf('Windows') === -1;
      console.log(ok);
      if (ok) {
        toggleFullScreen();
      }
    }
    return super.message(key);
  }

};

StartState = class StartState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>LeftOrRight new=>Editor');
  }

};

LeftOrRight = class LeftOrRight extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left=>RightTicking right=>LeftTicking pause=>StartState');
  }

  draw() {
    buttons.left.fg = 'white';
    return buttons.right.fg = 'white';
  }

};

LeftTicking = class LeftTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr right left=>RightTicking pause=>LeftPaused');
  }

  draw() {
    if (!timeout[0]) {
      states.Editor.clocks[0] -= 1 / 60;
    }
    if (states.Editor.clocks[0] <= 0) {
      states.Editor.clocks[0] = 0;
      timeout[0] = true;
    }
    buttons.left.fg = 'white';
    buttons.right.fg = 'black';
    return super.draw();
  }

  message(key) {
    if (key === 'left') {
      if (!timeout[0]) {
        states.Editor.clocks[0] += states.Editor.bonuses[0];
      }
      buttons.left.fg = 'white';
      buttons.right.fg = 'black';
    }
    return super.message(key);
  }

};

RightTicking = class RightTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right=>LeftTicking pause=>RightPaused');
  }

  draw() {
    if (!timeout[1]) {
      states.Editor.clocks[1] -= 1 / 60;
    }
    if (states.Editor.clocks[1] <= 0) {
      states.Editor.clocks[1] = 0;
      timeout[1] = true;
    }
    buttons.left.fg = 'black';
    buttons.right.fg = 'white';
    return super.draw();
  }

  message(key) {
    if (key === 'right') {
      if (!timeout[1]) {
        states.Editor.clocks[1] += states.Editor.bonuses[1];
      }
      buttons.left.fg = 'black';
      buttons.right.fg = 'white';
    }
    return super.message(key);
  }

};

LeftPaused = class LeftPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>LeftTicking new=>Editor');
  }

};

RightPaused = class RightPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>RightTicking new=>Editor');
  }

};

Editor = class Editor extends State {
  constructor(name1) {
    var arr, i, j, k, l, len, len1, letter, name, ref, ref1;
    super();
    this.name = name1;
    this.sums = [0, 1 + 2, 0, 0, 2, 0];
    this.clocks = [
      3 * 60,
      3 * 60 // seconds
    ];
    this.bonuses = [
      2,
      2 // seconds
    ];
    buttons.b0.fg = 'yellow';
    buttons.b1.fg = 'yellow';
    buttons.e1.fg = 'yellow';
    buttons.white.text = '3m + 2s';
    this.hcpSwap = 1;
    arr = 'red white green reflection bonus hcp ok=>StartState swap=>Editor'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'abcdef'[i];
      arr.push(letter);
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        name = letter + j;
        arr.push(name + '=>Editor');
      }
    }
    this.createTrans(arr.join(' '));
    console.log(arr.join(' '));
  }

  message(key) {
    var i, j, letter, number;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    }
    if (key !== 'swap' && key !== 'ok') {
      buttons[key].fg = buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      i = 'abcdef'.indexOf(letter);
      j = key[1];
      number = [1, 2, 4, 8, 15, 30][j];
      this.sums[i] = buttons[key].fg === 'gray' ? this.sums[i] - number : this.sums[i] + number;
    }
    if (key === 'ok') {
      timeout = [false, false];
      buttons.left.fg = 'black';
      buttons.right.fg = 'black';
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      buttons.red.text = '';
      return buttons.green.text = '';
    } else {
      buttons.red.text = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      return buttons.green.text = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'h m s m s t'.split(' ');
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / 60; // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

makeEditButtons = function() {
  var i, j, k, len, letter, name, number, ref, results, shown, size, xoff, yoff;
  ref = range(6);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    letter = 'abcdef'[i];
    size = 0.13 * width;
    xoff = size / 2 + (width - 6 * size) / 2;
    yoff = 0.33 * height;
    shown = 'h m s m s t'.split(' ');
    buttons[letter] = new DeadButton(shown[i], xoff + size * i, 0.26 * height);
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(6);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + j;
        results1.push(buttons[name] = new EditButton(number, xoff + size * i, yoff + size * j, size, size, 'gray'));
      }
      return results1;
    })());
  }
  return results;
};

preload = function() {
  return qr = loadImage('qr.png');
};

setup = function() {
  var h, ok, os, size, w;
  os = navigator.appVersion;
  ok = os.indexOf('Mac') === -1 && os.indexOf('Windows') === -1;
  if (ok) {
    createCanvas(screen.width, screen.height);
  } else {
    createCanvas(innerWidth, innerHeight);
  }
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  w = width;
  h = height;
  // Main Page
  size = 0.12 * h; // qr
  buttons.welcome = new Button('Welcome!', 0.5 * w, 0.5 * h, 0.5 * w, 0.5 * h);
  buttons.left = new RotateButton(0.5 * w, 0.22 * h, w, 0.44 * h, 180, 'red', 'black', 0); // eg up
  buttons.right = new RotateButton(0.5 * w, 0.78 * h, w, 0.44 * h, 0, 'green', 'black', 1); // eg down
  buttons.play = new Button('play', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.pause = new Button('pause', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.new = new Button('new', w - 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.qr = new ImageButton(qr, 0.5 * w, 0.5 * h, size, size);
  
  // Edit Page
  buttons.swap = new Button('swap', 0.33 * w, 0.93 * h, 0.20 * w, 0.08 * h);
  buttons.ok = new Button('ok', 0.67 * w, 0.93 * h, 0.20 * w, 0.08 * h);
  buttons.red = new ColorButton('red', w / 2, 0.03 * h);
  buttons.white = new ColorButton('white', w / 2, 0.09 * h);
  buttons.green = new ColorButton('green', w / 2, 0.15 * h);
  buttons.reflection = new DeadButton('reflection', 0.30 * w, 0.21 * h);
  buttons.bonus = new DeadButton('bonus', 0.63 * w, 0.21 * h);
  buttons.hcp = new DeadButton('hcp', 0.83 * w, 0.21 * h);
  makeEditButtons();
  console.log(buttons);
  createState('WelcomeState', WelcomeState);
  createState('StartState', StartState);
  createState('LeftOrRight', LeftOrRight);
  createState('Editor', Editor);
  createState('LeftTicking', LeftTicking);
  createState('RightTicking', RightTicking);
  createState('LeftPaused', LeftPaused);
  createState('RightPaused', RightPaused);
  currState = states.WelcomeState;
  return console.log('currState', currState);
};

draw = function() {
  var key, target;
  background('black');
  for (key in currState.transitions) {
    target = currState.transitions[key];
    if (key in buttons) {
      buttons[key].draw(target === void 0);
    } else {
      console.log('missing button:', key);
    }
  }
  // debug
  // text currState.name,0.5*width,0.03*height
  // fill 'green'
  // text round3(states.Editor.bonuses[0]),0.1*width,0.03*height
  // text round3(states.Editor.clocks[0]),0.25*width,0.03*height
  // text round3(states.Editor.clocks[1]),0.75*width,0.03*height
  // text round3(states.Editor.bonuses[1]),0.9*width,0.03*height
  return currState.draw();
};

mouseClicked = function() {
  var key, results;
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === void 0) {
      continue;
    }
    console.log(key);
    if (buttons[key].inside(mouseX, mouseY)) {
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsV0FBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBLE1BQUEsRUFBQSxXQUFBLEVBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxlQUFBLEVBQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUE7RUFBQTs7QUFBQSxJQUFBLEdBQU87O0FBQ1AsTUFBQSxHQUFTOztBQUVULE9BQUEsR0FBVSxDQUFBOztBQUNWLE1BQUEsR0FBUyxDQUFBOztBQUVULEVBQUEsR0FBSzs7QUFDTCxPQUFBLEdBQVUsQ0FBQyxLQUFELEVBQU8sS0FBUDs7QUFDVixTQUFBLEdBQVk7O0FBRU4sU0FBTixNQUFBLE9BQUE7RUFDQyxXQUFjLE1BQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxRQUF1QixPQUF2QixRQUFtQyxPQUFuQyxDQUFBO0lBQUMsSUFBQyxDQUFBO0lBQUssSUFBQyxDQUFBO0lBQUUsSUFBQyxDQUFBO0lBQUUsSUFBQyxDQUFBO0lBQUUsSUFBQyxDQUFBO0lBQUUsSUFBQyxDQUFBO0lBQVcsSUFBQyxDQUFBO0VBQWhDOztFQUNkLElBQU8sQ0FBQyxRQUFELENBQUE7SUFDTixJQUFHLFFBQUg7TUFBaUIsSUFBQSxDQUFLLFdBQUwsRUFBakI7S0FBQSxNQUFBO01BQXVDLElBQUEsQ0FBSyxJQUFDLENBQUEsRUFBTixFQUF2Qzs7SUFDQSxJ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QTNCO0VBQ0EsV0FBQSxDQUFZLFlBQVosRUFBMkIsVUFBM0I7RUFDQSxXQUFBLENBQVksYUFBWixFQUEyQixXQUEzQjtFQUVBLFNBQUEsR0FBWSxNQUFNLENBQUM7U0FDbkIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXdCLFNBQXhCO0FBakRPOztBQW1EUixJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLEdBQUEsRUFBQTtFQUFDLFVBQUEsQ0FBVyxPQUFYO0VBRUEsS0FBQSw0QkFBQTtJQUNDLE1BQUEsR0FBUyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUQ7SUFDOUIsSUFBRyxHQUFBLElBQU8sT0FBVjtNQUF1QixPQUFPLENBQUMsR0FBRCxDQUFLLENBQUMsSUFBYixDQUFrQixNQUFBLEtBQVUsTUFBNUIsRUFBdkI7S0FBQSxNQUFBO01BQ0ssT0FBTyxDQUFDLEdBQVIsQ0FBWSxpQkFBWixFQUE4QixHQUE5QixFQURMOztFQUZELENBRkQ7Ozs7Ozs7O1NBY0MsU0FBUyxDQUFDLElBQVYsQ0FBQTtBQWZNOztBQWlCUCxZQUFBLEdBQWUsUUFBQSxDQUFBLENBQUE7QUFDZixNQUFBLEdBQUEsRUFBQTtBQUFDO0VBQUEsS0FBQSw0QkFBQTtJQUNDLElBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFELENBQXJCLEtBQThCLE1BQWpDO0FBQWdELGVBQWhEOztJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWjtJQUNBLElBQUcsT0FBTyxDQUFDLEdBQUQsQ0FBSyxDQUFDLE1BQWIsQ0FBb0IsTUFBcEIsRUFBNEIsTUFBNUIsQ0FBSDtNQUNDLFNBQVMsQ0FBQyxPQUFWLENBQWtCLEdBQWxCO0FBQ0EsWUFGRDtLQUFBLE1BQUE7MkJBQUE7O0VBSEQsQ0FBQTs7QUFEYyIsInNvdXJjZXNDb250ZW50IjpbIkhPVVIgPSAzNjAwXHJcbk1JTlVURSA9IDYwXHJcblxyXG5idXR0b25zID0ge31cclxuc3RhdGVzID0ge31cclxuXHJcbnFyID0gbnVsbFxyXG50aW1lb3V0ID0gW2ZhbHNlLGZhbHNlXVxyXG5jdXJyU3RhdGUgPSBudWxsXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAdGV4dCxAeCxAeSxAdyxAaCxAYmc9J3doaXRlJyxAZmc9J2JsYWNrJykgLT5cclxuXHRkcmF3IDogKGRpc2FibGVkKSAtPlxyXG5cdFx0aWYgZGlzYWJsZWQgdGhlbiBmaWxsICdsaWdodGdyYXknIGVsc2UgZmlsbCBAYmdcclxuXHRcdHJlY3QgQHgsQHksQHcsQGhcclxuXHRcdHRleHRTaXplIDAuMDYqaGVpZ2h0XHJcblx0XHRmaWxsIEBmZ1xyXG5cdFx0dGV4dCBAdGV4dCxAeCxAeVxyXG5cdGluc2lkZSA6IC0+IC1Ady8yIDw9IG1vdXNlWC1AeCA8PSBAdy8yIGFuZCAtQGgvMiA8PSBtb3VzZVktQHkgPD0gQGgvMlxyXG5cclxuY2xhc3MgSW1hZ2VCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAaW1hZ2UsQHgsQHksQHcsQGgpIC0+XHJcblx0ZHJhdyA6ICAtPlxyXG5cdFx0aWYgQGltYWdlIHRoZW4gaW1hZ2UgQGltYWdlLCh3aWR0aC1AdykvMiwoaGVpZ2h0LUBoKS8yLEB3LEBoXHJcblx0aW5zaWRlIDogLT4gLUB3LzIgPD0gbW91c2VYLUB4IDw9IEB3LzIgYW5kIC1AaC8yIDw9IG1vdXNlWS1AeSA8PSBAaC8yXHJcblxyXG5jbGFzcyBSb3RhdGVCdXR0b24gZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdyxoLEBkZWdyZWVzLGJnLGZnLEBwbGF5ZXIpIC0+XHJcblx0XHRzdXBlciAnJyx4LHksdyxoLGJnLGZnXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0c2VjcyA9IHN0YXRlcy5FZGl0b3IuY2xvY2tzW0BwbGF5ZXJdXHJcblx0XHRpZiBzZWNzID09IDAgdGhlbiBmaWxsICdncmF5J1xyXG5cdFx0W2gsbSxzXSA9IGhtcyBNYXRoLnRydW5jIHNlY3NcclxuXHRcdHNzID0gaWYgaCA+PSAxIHRoZW4gZDIoaCkgKyAnOicgKyBkMihtKSBlbHNlIGQyKG0pICsgJzonICsgZDIocylcclxuXHJcblx0XHRmaWxsIEBiZ1xyXG5cdFx0cmVjdCBAeCxAeSxAdyxAaFxyXG5cclxuXHRcdHB1c2goKVxyXG5cdFx0dHJhbnNsYXRlIEB4LEB5XHJcblx0XHRyb3RhdGUgQGRlZ3JlZXNcclxuXHRcdHRleHRTaXplIDAuMjIqaGVpZ2h0XHJcblx0XHRmaWxsIEBmZ1xyXG5cdFx0dGV4dCBzcywwLDAuMDE3KmhlaWdodFxyXG5cdFx0dGV4dFNpemUgMC4wNSpoZWlnaHRcclxuXHRcdHRleHQgJysnICsgcm91bmQzKHN0YXRlcy5FZGl0b3IuYm9udXNlc1tAcGxheWVyXSkrJ3MnLDAsOTBcclxuXHRcdGlmIHRpbWVvdXRbQHBsYXllcl0gdGhlbiB0ZXh0ICdPdXQgb2YgdGltZScsMCwtOTBcclxuXHRcdHBvcCgpXHJcblxyXG5jbGFzcyBFZGl0QnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAodGV4dCx4LHksdyxoLGZnPSdncmF5JykgLT5cclxuXHRcdHN1cGVyIHRleHQseCx5LHcsaCwnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHR0ZXh0U2l6ZSAwLjA1KmhlaWdodFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHJcbmNsYXNzIERlYWRCdXR0b24gZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh0ZXh0LHgseSxmZz0nbGlnaHRncmF5JykgLT5cclxuXHRcdHN1cGVyIHRleHQseCx5LDAsMCwnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHR0ZXh0U2l6ZSAwLjA1KmhlaWdodFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHJcbmNsYXNzIENvbG9yQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoQGZnLHgseSkgLT5cclxuXHRcdHN1cGVyICcnLHgseSwwLDBcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHRTaXplIDAuMDQqaGVpZ2h0XHJcblx0XHRmaWxsIEBmZ1xyXG5cdFx0dGV4dCBAdGV4dCxAeCxAeVxyXG5cdFx0cG9wKClcclxuXHJcbmNsYXNzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAtPiBAdHJhbnNpdGlvbnMgPSB7fVxyXG5cdGNyZWF0ZVRyYW5zIDogKHQpIC0+IFxyXG5cdFx0YXJyID0gdC5zcGxpdCAnICdcclxuXHRcdGZvciBwYWlyIGluIGFyclxyXG5cdFx0XHRba2V5LHRhcmdldF0gPSBwYWlyLnNwbGl0ICc9PidcclxuXHRcdFx0QHRyYW5zaXRpb25zW2tleV0gPSB0YXJnZXRcclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHRcdGNvbnNvbGUubG9nIFwiY2xpY2tlZCAje0BuYW1lfS4je2tleX0gPT4gI3tAdHJhbnNpdGlvbnNba2V5XX1cIlxyXG5cdFx0aWYga2V5IG9mIEB0cmFuc2l0aW9uc1xyXG5cdFx0XHRjdXJyU3RhdGUgPSBzdGF0ZXNbQHRyYW5zaXRpb25zW2tleV1dXHJcblx0XHRcdGN1cnJTdGF0ZS5wYXRjaCgpXHJcblx0XHRlbHNlIGNvbnNvbGUubG9nICdtaXNzaW5nIHRyYW5zaXRpb246JyxrZXlcclxuXHRwYXRjaCA6IC0+XHJcblx0ZHJhdyA6IC0+XHJcblxyXG5jcmVhdGVTdGF0ZSA9IChrZXksa2xhc3MpIC0+IHN0YXRlc1trZXldID0gbmV3IGtsYXNzIGtleVxyXG5cclxucm91bmQzID0gKHgpIC0+IE1hdGgucm91bmQoeCoxMDAwKS8xMDAwXHJcblxyXG5wcmV0dHkgPSAodG90KSAtPlxyXG5cdHMgPSB0b3QgJSA2MFxyXG5cdHRvdCA9ICh0b3QgLSBzKSAvIDYwXHJcblx0bSA9IHRvdCAlIDYwXHJcblx0dG90ID0gKHRvdCAtIG0pIC8gNjBcclxuXHRoID0gdG90ICUgNjBcclxuXHRoZWFkZXIgPSAnJ1xyXG5cdGlmIGg+MCB0aGVuIGhlYWRlciArPSByb3VuZDMoaCkgKyAnaCdcclxuXHRpZiBtPjAgdGhlbiBoZWFkZXIgKz0gcm91bmQzKG0pICsgJ20nXHJcblx0aWYgcz4wIHRoZW4gaGVhZGVyICs9IHJvdW5kMyhzKSArICdzJ1xyXG5cdGhlYWRlclxyXG5cclxuZDIgPSAoeCkgLT5cclxuXHR4ID0gTWF0aC50cnVuYyB4XHJcblx0aWYgeCA8IDEwIHRoZW4gJzAnK3ggZWxzZSB4XHJcbmNvbnNvbGUubG9nIGQyKDMpLCAnMDMnXHJcblxyXG5obXMgPSAoeCkgLT5cclxuXHRzID0geCAlJSA2MFxyXG5cdHggPSB4IC8vIDYwXHJcblx0bSA9IHggJSUgNjBcclxuXHR4ID0geCAvLyA2MFxyXG5cdGggPSB4XHJcblx0W2gsbSxzXVxyXG5jb25zb2xlLmxvZyBobXMoMTgwKSwgWzAsMywwXVxyXG5cclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbmNsYXNzIFdlbGNvbWVTdGF0ZSBleHRlbmRzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlcigpXHJcblx0XHRAY3JlYXRlVHJhbnMgJ3dlbGNvbWU9PlN0YXJ0U3RhdGUnXHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRpZiBrZXkgPT0gJ3dlbGNvbWUnXHJcblx0XHRcdG9zID0gbmF2aWdhdG9yLmFwcFZlcnNpb25cclxuXHRcdFx0b2sgPSBvcy5pbmRleE9mKCdNYWMnKSA9PSAtMSBhbmQgb3MuaW5kZXhPZignV2luZG93cycpID09IC0xXHJcblx0XHRcdGNvbnNvbGUubG9nIG9rXHJcblx0XHRcdGlmIG9rIHRoZW4gdG9nZ2xlRnVsbFNjcmVlbigpXHJcblx0XHRzdXBlciBrZXlcclxuXHJcbmNsYXNzIFN0YXJ0U3RhdGUgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QGNyZWF0ZVRyYW5zICdxciBsZWZ0IHJpZ2h0IHBsYXk9PkxlZnRPclJpZ2h0IG5ldz0+RWRpdG9yJ1xyXG5cclxuY2xhc3MgTGVmdE9yUmlnaHQgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QGNyZWF0ZVRyYW5zICdxciBsZWZ0PT5SaWdodFRpY2tpbmcgcmlnaHQ9PkxlZnRUaWNraW5nIHBhdXNlPT5TdGFydFN0YXRlJ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ3doaXRlJ1xyXG5cdFx0YnV0dG9ucy5yaWdodC5mZyA9ICd3aGl0ZSdcclxuXHJcbmNsYXNzIExlZnRUaWNraW5nIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBjcmVhdGVUcmFucyAncXIgcmlnaHQgbGVmdD0+UmlnaHRUaWNraW5nIHBhdXNlPT5MZWZ0UGF1c2VkJ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgbm90IHRpbWVvdXRbMF0gdGhlbiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSAtPSAxLzYwXHJcblx0XHRpZiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSA8PSAwIFxyXG5cdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSA9IDBcclxuXHRcdFx0dGltZW91dFswXSA9IHRydWVcclxuXHRcdGJ1dHRvbnMubGVmdC5mZyA9ICd3aGl0ZSdcclxuXHRcdGJ1dHRvbnMucmlnaHQuZmcgPSAnYmxhY2snXHJcblx0XHRzdXBlcigpXHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRpZiBrZXkgPT0gJ2xlZnQnXHJcblx0XHRcdGlmIG5vdCB0aW1lb3V0WzBdXHJcblx0XHRcdFx0c3RhdGVzLkVkaXRvci5jbG9ja3NbMF0gKz0gc3RhdGVzLkVkaXRvci5ib251c2VzWzBdXHJcblx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICd3aGl0ZSdcclxuXHRcdFx0YnV0dG9ucy5yaWdodC5mZyA9ICdibGFjaydcclxuXHRcdHN1cGVyIGtleVxyXG5cclxuY2xhc3MgUmlnaHRUaWNraW5nIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBjcmVhdGVUcmFucyAncXIgbGVmdCByaWdodD0+TGVmdFRpY2tpbmcgcGF1c2U9PlJpZ2h0UGF1c2VkJ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgbm90IHRpbWVvdXRbMV0gdGhlbiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSAtPSAxLzYwXHJcblx0XHRpZiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSA8PSAwIFxyXG5cdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSA9IDBcclxuXHRcdFx0dGltZW91dFsxXSA9IHRydWVcclxuXHRcdGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuXHRcdGJ1dHRvbnMucmlnaHQuZmcgPSAnd2hpdGUnXHJcblx0XHRzdXBlcigpXHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRpZiBrZXkgPT0gJ3JpZ2h0J1xyXG5cdFx0XHRpZiBub3QgdGltZW91dFsxXVxyXG5cdFx0XHRcdHN0YXRlcy5FZGl0b3IuY2xvY2tzWzFdICs9IHN0YXRlcy5FZGl0b3IuYm9udXNlc1sxXVxyXG5cdFx0XHRidXR0b25zLmxlZnQuZmcgPSAnYmxhY2snXHJcblx0XHRcdGJ1dHRvbnMucmlnaHQuZmcgPSAnd2hpdGUnXHJcblx0XHRzdXBlciBrZXlcclxuXHJcbmNsYXNzIExlZnRQYXVzZWQgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QGNyZWF0ZVRyYW5zICdxciBsZWZ0IHJpZ2h0IHBsYXk9PkxlZnRUaWNraW5nIG5ldz0+RWRpdG9yJ1xyXG5cclxuY2xhc3MgUmlnaHRQYXVzZWQgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QGNyZWF0ZVRyYW5zICdxciBsZWZ0IHJpZ2h0IHBsYXk9PlJpZ2h0VGlja2luZyBuZXc9PkVkaXRvcidcclxuXHJcbmNsYXNzIEVkaXRvciBleHRlbmRzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlcigpXHJcblx0XHRAc3VtcyA9IFswLDErMiwwLDAsMiwwXVxyXG5cclxuXHRcdEBjbG9ja3MgPSBbMyo2MCwzKjYwXSAjIHNlY29uZHNcclxuXHRcdEBib251c2VzID0gWzIsMl0gIyBzZWNvbmRzXHJcblx0XHRidXR0b25zLmIwLmZnID0gJ3llbGxvdydcclxuXHRcdGJ1dHRvbnMuYjEuZmcgPSAneWVsbG93J1xyXG5cdFx0YnV0dG9ucy5lMS5mZyA9ICd5ZWxsb3cnXHJcblx0XHRidXR0b25zLndoaXRlLnRleHQgPSAnM20gKyAycydcclxuXHJcblx0XHRAaGNwU3dhcCA9IDFcclxuXHRcdGFyciA9ICdyZWQgd2hpdGUgZ3JlZW4gcmVmbGVjdGlvbiBib251cyBoY3Agb2s9PlN0YXJ0U3RhdGUgc3dhcD0+RWRpdG9yJy5zcGxpdCAnICdcclxuXHRcdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdFx0bGV0dGVyID0gJ2FiY2RlZidbaV1cclxuXHRcdFx0YXJyLnB1c2ggbGV0dGVyXHJcblx0XHRcdGZvciBqIGluIHJhbmdlIDZcclxuXHRcdFx0XHRuYW1lID0gbGV0dGVyICsgalxyXG5cdFx0XHRcdGFyci5wdXNoIG5hbWUgKyAnPT5FZGl0b3InXHJcblx0XHRAY3JlYXRlVHJhbnMgYXJyLmpvaW4gJyAnXHJcblx0XHRjb25zb2xlLmxvZyBhcnIuam9pbiAnICdcclxuXHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRpZiBrZXkgPT0gJ3N3YXAnXHJcblx0XHRcdEBoY3BTd2FwID0gLUBoY3BTd2FwXHJcblx0XHRpZiBrZXkgIT0gJ3N3YXAnIGFuZCBrZXkgIT0gJ29rJ1xyXG5cdFx0XHRidXR0b25zW2tleV0uZmcgPSBpZiBidXR0b25zW2tleV0uZmcgPT0gJ2dyYXknIHRoZW4gJ3llbGxvdycgZWxzZSAnZ3JheSdcclxuXHRcdFx0bGV0dGVyID0ga2V5WzBdXHJcblx0XHRcdGkgPSAnYWJjZGVmJy5pbmRleE9mIGxldHRlclxyXG5cdFx0XHRqID0ga2V5WzFdXHJcblx0XHRcdG51bWJlciA9IFsxLDIsNCw4LDE1LDMwXVtqXVxyXG5cdFx0XHRAc3Vtc1tpXSA9IGlmIGJ1dHRvbnNba2V5XS5mZyA9PSAnZ3JheScgdGhlbiBAc3Vtc1tpXS1udW1iZXIgZWxzZSBAc3Vtc1tpXStudW1iZXJcclxuXHRcdGlmIGtleSA9PSAnb2snIFxyXG5cdFx0XHR0aW1lb3V0ID0gW2ZhbHNlLGZhbHNlXVxyXG5cdFx0XHRidXR0b25zLmxlZnQuZmcgPSAnYmxhY2snXHJcblx0XHRcdGJ1dHRvbnMucmlnaHQuZmcgPSAnYmxhY2snXHJcblx0XHRAdXBwZGF0ZXJhKClcclxuXHRcdHN1cGVyIGtleVxyXG5cclxuXHR1cHBkYXRlcmEgOiAtPlxyXG5cdFx0YnV0dG9ucy53aGl0ZS50ZXh0ID0gQGNvbXBhY3QoKVxyXG5cdFx0QGhhbmRpY2FwKClcclxuXHRcdGlmIEBoY3AgPT0gMFxyXG5cdFx0XHRidXR0b25zLnJlZC50ZXh0ICAgPSAnJ1xyXG5cdFx0XHRidXR0b25zLmdyZWVuLnRleHQgPSAnJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRidXR0b25zLnJlZC50ZXh0ICAgPSBwcmV0dHkoQHBsYXllcnNbMF1bMF0pICsgJyArICcgKyBwcmV0dHkoQHBsYXllcnNbMF1bMV0pXHJcblx0XHRcdGJ1dHRvbnMuZ3JlZW4udGV4dCA9IHByZXR0eShAcGxheWVyc1sxXVswXSkgKyAnICsgJyArIHByZXR0eShAcGxheWVyc1sxXVsxXSlcclxuXHJcblx0Y29tcGFjdCA6IC0+XHJcblx0XHRoZWFkZXJzID0gJ2ggbSBzIG0gcyB0Jy5zcGxpdCAnICdcclxuXHRcdGhlYWRlcjAgPSAnJ1xyXG5cdFx0aGVhZGVyMSA9ICcnXHJcblx0XHRmb3IgaSBpbiByYW5nZSAwLDNcclxuXHRcdFx0aWYgQHN1bXNbaV0+MCB0aGVuIGhlYWRlcjAgKz0gQHN1bXNbaV0gKyBoZWFkZXJzW2ldXHJcblx0XHRmb3IgaSBpbiByYW5nZSAzLDVcclxuXHRcdFx0aWYgQHN1bXNbaV0+MCB0aGVuIGhlYWRlcjEgKz0gQHN1bXNbaV0gKyBoZWFkZXJzW2ldXHJcblx0XHRoZWFkZXIgPSBoZWFkZXIwXHJcblx0XHRpZiBoZWFkZXIxLmxlbmd0aCA+IDAgdGhlbiBoZWFkZXIgKz0gJyArICcgKyBoZWFkZXIxXHJcblx0XHRoZWFkZXJcclxuXHJcblx0aGFuZGljYXAgOiAtPlxyXG5cdFx0QGhjcCA9IEBoY3BTd2FwICogQHN1bXNbNV0vNjAgIyAwLjAgLi4gMS4wXHJcblx0XHRAcmVmbCA9IEhPVVIgKiBAc3Vtc1swXSArIE1JTlVURSAqIEBzdW1zWzFdICsgQHN1bXNbMl0gIyBzZWt1bmRlclxyXG5cdFx0QGJvbnVzID0gICAgICAgICAgICAgICAgICBNSU5VVEUgKiBAc3Vtc1szXSArIEBzdW1zWzRdICMgc2VrdW5kZXJcclxuXHRcdEBwbGF5ZXJzID0gW11cclxuXHRcdEBwbGF5ZXJzWzBdID0gW0ByZWZsKigxK0BoY3ApLCBAYm9udXMqKDErQGhjcCldXHJcblx0XHRAcGxheWVyc1sxXSA9IFtAcmVmbCooMS1AaGNwKSwgQGJvbnVzKigxLUBoY3ApXVxyXG5cdFx0QGNsb2NrcyAgPSBbQHBsYXllcnNbMF1bMF0sIEBwbGF5ZXJzWzFdWzBdXVxyXG5cdFx0QGJvbnVzZXMgPSBbQHBsYXllcnNbMF1bMV0sIEBwbGF5ZXJzWzFdWzFdXVxyXG5cclxubWFrZUVkaXRCdXR0b25zID0gLT5cclxuXHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHRsZXR0ZXIgPSAnYWJjZGVmJ1tpXVxyXG5cdFx0c2l6ZSA9IDAuMTMqd2lkdGhcclxuXHRcdHhvZmYgPSBzaXplLzIgKyAod2lkdGgtNipzaXplKS8yXHJcblx0XHR5b2ZmID0gMC4zMypoZWlnaHRcclxuXHRcdHNob3duPSdoIG0gcyBtIHMgdCcuc3BsaXQgJyAnXHJcblx0XHRidXR0b25zW2xldHRlcl0gPSBuZXcgRGVhZEJ1dHRvbiBzaG93bltpXSwgeG9mZitzaXplKmksIDAuMjYqaGVpZ2h0IFxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgNlxyXG5cdFx0XHRudW1iZXIgPSBbMSwyLDQsOCwxNSwzMF1bal1cclxuXHRcdFx0bmFtZSA9IGxldHRlciArIGpcclxuXHRcdFx0YnV0dG9uc1tuYW1lXSA9IG5ldyBFZGl0QnV0dG9uIG51bWJlciwgeG9mZitzaXplKmksIHlvZmYrc2l6ZSpqLCBzaXplLCBzaXplLCAnZ3JheSdcclxuXHJcbnByZWxvYWQgPSAtPiBxciA9IGxvYWRJbWFnZSAncXIucG5nJ1xyXG5cclxuc2V0dXAgPSAtPlxyXG5cdG9zID0gbmF2aWdhdG9yLmFwcFZlcnNpb25cclxuXHRvayA9IG9zLmluZGV4T2YoJ01hYycpID09IC0xIGFuZCBvcy5pbmRleE9mKCdXaW5kb3dzJykgPT0gLTFcclxuXHRpZiBvayB0aGVuIGNyZWF0ZUNhbnZhcyBzY3JlZW4ud2lkdGgsc2NyZWVuLmhlaWdodFxyXG5cdGVsc2UgY3JlYXRlQ2FudmFzIGlubmVyV2lkdGgsaW5uZXJIZWlnaHRcclxuXHJcblx0YmFja2dyb3VuZCAnYmxhY2snXHJcblxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0YW5nbGVNb2RlIERFR1JFRVNcclxuXHJcblx0dyA9IHdpZHRoXHJcblx0aCA9IGhlaWdodFxyXG5cclxuXHQjIE1haW4gUGFnZVxyXG5cdHNpemUgPSAwLjEyKmggIyBxclxyXG5cdGJ1dHRvbnMud2VsY29tZSA9IG5ldyBCdXR0b24gJ1dlbGNvbWUhJywgMC41KncsIDAuNSpoLCAwLjUqdywgMC41KmhcclxuXHRidXR0b25zLmxlZnQgICAgPSBuZXcgUm90YXRlQnV0dG9uICAgIDAuNSp3LCAwLjIyKmgsIHcsICAgICAwLjQ0KmgsIDE4MCwgJ3JlZCcsICAnYmxhY2snLCAwICMgZWcgdXBcclxuXHRidXR0b25zLnJpZ2h0ICAgPSBuZXcgUm90YXRlQnV0dG9uICAgIDAuNSp3LCAwLjc4KmgsIHcsICAgICAwLjQ0KmgsICAgMCwgJ2dyZWVuJywnYmxhY2snLCAxICMgZWcgZG93blxyXG5cdGJ1dHRvbnMucGxheSAgICA9IG5ldyBCdXR0b24gJ3BsYXknLCAgMC4yNSoody1zaXplKSwgMC41MCpoLCAody1zaXplKS8yLCBzaXplXHJcblx0YnV0dG9ucy5wYXVzZSAgID0gbmV3IEJ1dHRvbiAncGF1c2UnLCAwLjI1Kih3LXNpemUpLCAwLjUwKmgsICh3LXNpemUpLzIsIHNpemVcclxuXHRidXR0b25zLm5ldyAgICAgPSBuZXcgQnV0dG9uICduZXcnLCAgIHctMC4yNSoody1zaXplKSwgMC41MCpoLCAody1zaXplKS8yLCBzaXplXHJcblx0YnV0dG9ucy5xciAgICAgID0gbmV3IEltYWdlQnV0dG9uIHFyLDAuNSp3LCAwLjUqaCwgc2l6ZSwgc2l6ZVxyXG5cdFxyXG5cdCMgRWRpdCBQYWdlXHJcblx0YnV0dG9ucy5zd2FwICA9IG5ldyBCdXR0b24gJ3N3YXAnLCAwLjMzKncsIDAuOTMqaCwgMC4yMCp3LCAwLjA4KmhcclxuXHRidXR0b25zLm9rICAgID0gbmV3IEJ1dHRvbiAnb2snLCAgIDAuNjcqdywgMC45MypoLCAwLjIwKncsIDAuMDgqaFxyXG5cdGJ1dHRvbnMucmVkICAgPSBuZXcgQ29sb3JCdXR0b24gJ3JlZCcsICAgdy8yLCAwLjAzKmhcclxuXHRidXR0b25zLndoaXRlID0gbmV3IENvbG9yQnV0dG9uICd3aGl0ZScsIHcvMiwgMC4wOSpoXHJcblx0YnV0dG9ucy5ncmVlbiA9IG5ldyBDb2xvckJ1dHRvbiAnZ3JlZW4nLCB3LzIsIDAuMTUqaFxyXG5cdGJ1dHRvbnMucmVmbGVjdGlvbiA9IG5ldyBEZWFkQnV0dG9uICdyZWZsZWN0aW9uJywgMC4zMCp3LCAwLjIxKmhcclxuXHRidXR0b25zLmJvbnVzID0gbmV3IERlYWRCdXR0b24gJ2JvbnVzJywgMC42Myp3LCAwLjIxKmhcclxuXHRidXR0b25zLmhjcCAgID0gbmV3IERlYWRCdXR0b24gJ2hjcCcsIDAuODMqdywgMC4yMSpoXHJcblxyXG5cdG1ha2VFZGl0QnV0dG9ucygpXHJcblxyXG5cdGNvbnNvbGUubG9nIGJ1dHRvbnNcclxuXHJcblx0Y3JlYXRlU3RhdGUgJ1dlbGNvbWVTdGF0ZScsV2VsY29tZVN0YXRlXHJcblx0Y3JlYXRlU3RhdGUgJ1N0YXJ0U3RhdGUnLCAgU3RhcnRTdGF0ZVxyXG5cdGNyZWF0ZVN0YXRlICdMZWZ0T3JSaWdodCcsIExlZnRPclJpZ2h0XHJcblx0Y3JlYXRlU3RhdGUgJ0VkaXRvcicsICAgICAgRWRpdG9yXHJcblx0Y3JlYXRlU3RhdGUgJ0xlZnRUaWNraW5nJywgTGVmdFRpY2tpbmdcclxuXHRjcmVhdGVTdGF0ZSAnUmlnaHRUaWNraW5nJyxSaWdodFRpY2tpbmdcclxuXHRjcmVhdGVTdGF0ZSAnTGVmdFBhdXNlZCcsICBMZWZ0UGF1c2VkXHJcblx0Y3JlYXRlU3RhdGUgJ1JpZ2h0UGF1c2VkJywgUmlnaHRQYXVzZWRcclxuXHJcblx0Y3VyclN0YXRlID0gc3RhdGVzLldlbGNvbWVTdGF0ZVxyXG5cdGNvbnNvbGUubG9nICdjdXJyU3RhdGUnLGN1cnJTdGF0ZVxyXG5cclxuZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCAnYmxhY2snXHJcblxyXG5cdGZvciBrZXkgb2YgY3VyclN0YXRlLnRyYW5zaXRpb25zXHJcblx0XHR0YXJnZXQgPSBjdXJyU3RhdGUudHJhbnNpdGlvbnNba2V5XVxyXG5cdFx0aWYga2V5IG9mIGJ1dHRvbnMgdGhlbiBidXR0b25zW2tleV0uZHJhdyB0YXJnZXQgPT0gdW5kZWZpbmVkXHJcblx0XHRlbHNlIGNvbnNvbGUubG9nICdtaXNzaW5nIGJ1dHRvbjonLGtleVxyXG5cclxuXHQjIGRlYnVnXHJcblx0IyB0ZXh0IGN1cnJTdGF0ZS5uYW1lLDAuNSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cdCMgZmlsbCAnZ3JlZW4nXHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbMF0pLDAuMSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLkVkaXRvci5jbG9ja3NbMF0pLDAuMjUqd2lkdGgsMC4wMypoZWlnaHRcclxuXHQjIHRleHQgcm91bmQzKHN0YXRlcy5FZGl0b3IuY2xvY2tzWzFdKSwwLjc1KndpZHRoLDAuMDMqaGVpZ2h0XHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbMV0pLDAuOSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cdGN1cnJTdGF0ZS5kcmF3KClcclxuXHJcbm1vdXNlQ2xpY2tlZCA9IC0+XHJcblx0Zm9yIGtleSBvZiBjdXJyU3RhdGUudHJhbnNpdGlvbnNcclxuXHRcdGlmIGN1cnJTdGF0ZS50cmFuc2l0aW9uc1trZXldID09IHVuZGVmaW5lZCB0aGVuIGNvbnRpbnVlXHJcblx0XHRjb25zb2xlLmxvZyBrZXlcclxuXHRcdGlmIGJ1dHRvbnNba2V5XS5pbnNpZGUgbW91c2VYLCBtb3VzZVkgXHJcblx0XHRcdGN1cnJTdGF0ZS5tZXNzYWdlIGtleVxyXG5cdFx0XHRicmVha1xyXG4iXX0=
//# sourceURL=c:\github\2022-006-StateLab\coffee\sketch.coffee