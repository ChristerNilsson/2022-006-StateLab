// Generated by CoffeeScript 2.5.1
var Button, ColorButton, DeadButton, EditButton, Editor, HOUR, ImageButton, LeftOrRight, LeftPaused, LeftTicking, MINUTE, RightPaused, RightTicking, RotateButton, StartState, State, WelcomeState, buttons, createState, currState, d2, diag, draw, hms, makeEditButtons, mouseClicked, preload, pretty, qr, round3, setup, states, timeout,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HOUR = 3600;

MINUTE = 60;

buttons = {};

states = {};

qr = null;

timeout = [false, false];

currState = null;

diag = 0;

Button = class Button {
  constructor(text1, x1, y1, w1, h1, bg1 = 'white', fg1 = 'black') {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg1;
    this.fg = fg1;
  }

  draw(disabled) {
    if (disabled) {
      fill('lightgray');
    } else {
      fill(this.bg);
    }
    rect(this.x, this.y, this.w, this.h);
    textSize(0.04 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

ImageButton = class ImageButton {
  constructor(image1, x1, y1, w1, h1) {
    this.image = image1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
  }

  draw() {
    if (this.image) {
      return image(this.image, (width - this.w) / 2, (height - this.h) / 2, this.w, this.h);
    }
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

RotateButton = class RotateButton extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super('', x, y, w, h, bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = states.Editor.clocks[this.player];
    if (secs === 0) {
      fill('gray');
    }
    [h, m, s] = hms(Math.trunc(secs));
    ss = h >= 1 ? d2(h) + ':' + d2(m) : d2(m) + ':' + d2(s);
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    textSize(0.18 * diag);
    fill(this.fg);
    text(ss, 0, 0.017 * height);
    textSize(0.05 * diag);
    text('+' + round3(states.Editor.bonuses[this.player]) + 's', 0, 0.15 * height);
    if (timeout[this.player]) {
      text('Out of time', 0, -0.15 * height);
    }
    return pop();
  }

};

EditButton = class EditButton extends Button {
  constructor(text, x, y, w, h, fg = 'gray') {
    super(text, x, y, w, h, 'black', fg);
  }

  draw() {
    textSize(0.05 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

DeadButton = class DeadButton extends Button {
  constructor(text, x, y, fg = 'lightgray') {
    super(text, x, y, 0, 0, 'black', fg);
  }

  draw() {
    textSize(0.04 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

ColorButton = class ColorButton extends Button {
  constructor(fg1, x, y) {
    super('', x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(0.04 * diag);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(t) {
    var arr, k, key, len, pair, results, target;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      pair = arr[k];
      [key, target] = pair.split('=>');
      results.push(this.transitions[key] = target);
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    if (key in this.transitions) {
      currState = states[this.transitions[key]];
      return currState.patch();
    } else {
      return console.log('missing transition:', key);
    }
  }

  patch() {}

  draw() {}

};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

round3 = function(x) {
  return Math.round(x * 1000) / 1000;
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (h > 0) {
    header += round3(h) + 'h';
  }
  if (m > 0) {
    header += round3(m) + 'm';
  }
  if (s > 0) {
    header += round3(s) + 's';
  }
  return header;
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.log(d2(3), '03');

hms = function(x) {
  var h, m, s;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  return [h, m, s];
};

console.log(hms(180), [0, 3, 0]);

//##################################
WelcomeState = class WelcomeState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('welcome=>StartState');
  }

  message(key) {
    var ok, os;
    if (key === 'welcome') {
      os = navigator.appVersion;
      ok = os.indexOf('Mac') === -1 && os.indexOf('Windows') === -1;
      console.log(ok);
      if (ok) {
        toggleFullScreen();
      }
    }
    return super.message(key);
  }

};

StartState = class StartState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>LeftOrRight new=>Editor');
  }

};

LeftOrRight = class LeftOrRight extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left=>RightTicking right=>LeftTicking pause=>StartState');
  }

  draw() {
    buttons.left.fg = 'white';
    return buttons.right.fg = 'white';
  }

};

LeftTicking = class LeftTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr right left=>RightTicking pause=>LeftPaused');
  }

  draw() {
    if (!timeout[0]) {
      states.Editor.clocks[0] -= 1 / 60;
    }
    if (states.Editor.clocks[0] <= 0) {
      states.Editor.clocks[0] = 0;
      timeout[0] = true;
    }
    buttons.left.fg = 'white';
    buttons.right.fg = 'black';
    return super.draw();
  }

  message(key) {
    if (key === 'left') {
      if (!timeout[0]) {
        states.Editor.clocks[0] += states.Editor.bonuses[0];
      }
      buttons.left.fg = 'white';
      buttons.right.fg = 'black';
    }
    return super.message(key);
  }

};

RightTicking = class RightTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right=>LeftTicking pause=>RightPaused');
  }

  draw() {
    if (!timeout[1]) {
      states.Editor.clocks[1] -= 1 / 60;
    }
    if (states.Editor.clocks[1] <= 0) {
      states.Editor.clocks[1] = 0;
      timeout[1] = true;
    }
    buttons.left.fg = 'black';
    buttons.right.fg = 'white';
    return super.draw();
  }

  message(key) {
    if (key === 'right') {
      if (!timeout[1]) {
        states.Editor.clocks[1] += states.Editor.bonuses[1];
      }
      buttons.left.fg = 'black';
      buttons.right.fg = 'white';
    }
    return super.message(key);
  }

};

LeftPaused = class LeftPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>LeftTicking new=>Editor');
  }

};

RightPaused = class RightPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>RightTicking new=>Editor');
  }

};

Editor = class Editor extends State {
  constructor(name1) {
    var arr, i, j, k, l, len, len1, letter, name, ref, ref1;
    super();
    this.name = name1;
    this.sums = [0, 1 + 2, 0, 0, 2, 0];
    this.clocks = [
      3 * 60,
      3 * 60 // seconds
    ];
    this.bonuses = [
      2,
      2 // seconds
    ];
    buttons.b0.fg = 'yellow';
    buttons.b1.fg = 'yellow';
    buttons.e1.fg = 'yellow';
    buttons.white.text = '3m + 2s';
    this.hcpSwap = 1;
    arr = 'red white green reflection bonus hcp ok=>StartState swap=>Editor'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'abcdef'[i];
      arr.push(letter);
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        name = letter + j;
        arr.push(name + '=>Editor');
      }
    }
    this.createTrans(arr.join(' '));
    console.log(arr.join(' '));
  }

  message(key) {
    var i, j, letter, number;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    }
    if (key !== 'swap' && key !== 'ok') {
      buttons[key].fg = buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      i = 'abcdef'.indexOf(letter);
      j = key[1];
      number = [1, 2, 4, 8, 15, 30][j];
      this.sums[i] = buttons[key].fg === 'gray' ? this.sums[i] - number : this.sums[i] + number;
    }
    if (key === 'ok') {
      timeout = [false, false];
      buttons.left.fg = 'black';
      buttons.right.fg = 'black';
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      buttons.red.text = '';
      return buttons.green.text = '';
    } else {
      buttons.red.text = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      return buttons.green.text = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'h m s m s t'.split(' ');
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / 60; // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

makeEditButtons = function() {
  var i, j, k, len, letter, name, number, ref, results, shown, size, xoff, yoff;
  ref = range(6);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    letter = 'abcdef'[i];
    size = 0.13 * width;
    xoff = size / 2 + (width - 6 * size) / 2;
    yoff = 0.33 * height;
    shown = 'h m s m s t'.split(' ');
    buttons[letter] = new DeadButton(shown[i], xoff + size * i, 0.26 * height);
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(6);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + j;
        results1.push(buttons[name] = new EditButton(number, xoff + size * i, yoff + size * j, size, size, 'gray'));
      }
      return results1;
    })());
  }
  return results;
};

preload = function() {
  return qr = loadImage('qr.png');
};

setup = function() {
  var h, ok, os, size, w;
  os = navigator.appVersion;
  ok = os.indexOf('Mac') === -1 && os.indexOf('Windows') === -1;
  if (ok) {
    createCanvas(screen.width, screen.height);
  } else {
    createCanvas(innerWidth, innerHeight);
  }
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  w = width;
  h = height;
  // Main Page
  size = 0.12 * h; // qr
  buttons.welcome = new Button('Welcome!', 0.5 * w, 0.5 * h, 0.5 * w, 0.5 * h);
  buttons.left = new RotateButton(0.5 * w, 0.22 * h, w, 0.44 * h, 180, 'red', 'black', 0); // eg up
  buttons.right = new RotateButton(0.5 * w, 0.78 * h, w, 0.44 * h, 0, 'green', 'black', 1); // eg down
  buttons.play = new Button('play', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.pause = new Button('pause', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.new = new Button('new', w - 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.qr = new ImageButton(qr, 0.5 * w, 0.5 * h, size, size);
  
  // Edit Page
  buttons.swap = new Button('swap', 0.33 * w, 0.93 * h, 0.20 * w, 0.08 * h);
  buttons.ok = new Button('ok', 0.67 * w, 0.93 * h, 0.20 * w, 0.08 * h);
  buttons.red = new ColorButton('red', w / 2, 0.03 * h);
  buttons.white = new ColorButton('white', w / 2, 0.09 * h);
  buttons.green = new ColorButton('green', w / 2, 0.15 * h);
  buttons.reflection = new DeadButton('reflection', 0.30 * w, 0.21 * h);
  buttons.bonus = new DeadButton('bonus', 0.63 * w, 0.21 * h);
  buttons.hcp = new DeadButton('hcp', 0.83 * w, 0.21 * h);
  makeEditButtons();
  console.log(buttons);
  createState('WelcomeState', WelcomeState);
  createState('StartState', StartState);
  createState('LeftOrRight', LeftOrRight);
  createState('Editor', Editor);
  createState('LeftTicking', LeftTicking);
  createState('RightTicking', RightTicking);
  createState('LeftPaused', LeftPaused);
  createState('RightPaused', RightPaused);
  currState = states.WelcomeState;
  return console.log('currState', currState);
};

draw = function() {
  var key, target;
  background('black');
  for (key in currState.transitions) {
    target = currState.transitions[key];
    if (key in buttons) {
      buttons[key].draw(target === void 0);
    } else {
      console.log('missing button:', key);
    }
  }
  // debug
  // text currState.name,0.5*width,0.03*height
  // fill 'green'
  // text round3(states.Editor.bonuses[0]),0.1*width,0.03*height
  // text round3(states.Editor.clocks[0]),0.25*width,0.03*height
  // text round3(states.Editor.clocks[1]),0.75*width,0.03*height
  // text round3(states.Editor.bonuses[1]),0.9*width,0.03*height
  return currState.draw();
};

mouseClicked = function() {
  var key, results;
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === void 0) {
      continue;
    }
    console.log(key);
    if (buttons[key].inside(mouseX, mouseY)) {
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-006-StateLab\coffee\sketch.coffee