// Generated by CoffeeScript 2.5.1
var Button, ColorButton, DeadButton, EditButton, Editor, HOUR, LeftOrRight, LeftPaused, LeftTicking, MINUTE, RightPaused, RightTicking, RotateButton, StartState, State, buttons, createState, currState, d2, draw, hms, makeEditButtons, mouseClicked, pretty, round3, setup, states, timeout,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HOUR = 3600;

MINUTE = 60;

buttons = {};

states = {};

timeout = [false, false];

currState = null;

Button = class Button {
  constructor(text1, x1, y1, w1, h1, bg1 = 'white', fg1 = 'black') {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg1;
    this.fg = fg1;
  }

  draw(disabled) {
    if (disabled) {
      fill('lightgray');
    } else {
      fill(this.bg);
    }
    rect(this.x, this.y, this.w, this.h);
    textSize(0.04 * height);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

RotateButton = class RotateButton extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super('', x, y, w, h, bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = states.Editor.clocks[this.player];
    if (secs === 0) {
      fill('gray');
    }
    [h, m, s] = hms(Math.trunc(secs));
    ss = h >= 1 ? d2(h) + ':' + d2(m) : d2(m) + ':' + d2(s);
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    textSize(0.22 * height);
    fill(this.fg);
    text(ss, 0, 0.017 * height);
    textSize(0.05 * height);
    text('+' + round3(states.Editor.bonuses[this.player]) + 's', 0, 90);
    if (timeout[this.player]) {
      text('Out of time', 0, -90);
    }
    return pop();
  }

};

EditButton = class EditButton extends Button {
  constructor(text, x, y, w, h, fg = 'gray') {
    super(text, x, y, w, h, 'black', fg);
  }

  draw() {
    textSize(0.05 * height);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

DeadButton = class DeadButton extends Button {
  constructor(text, x, y, fg = 'lightgray') {
    super(text, x, y, 0, 0, 'black', fg);
  }

  draw() {
    textSize(0.05 * height);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

ColorButton = class ColorButton extends Button {
  constructor(fg1, x, y) {
    super('', x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(0.04 * height);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(t) {
    var arr, k, key, len, pair, results, target;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      pair = arr[k];
      [key, target] = pair.split('=>');
      results.push(this.transitions[key] = target);
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    if (key in this.transitions) {
      currState = states[this.transitions[key]];
      return currState.patch();
    } else {
      return console.log('missing transition:', key);
    }
  }

  patch() {}

  draw() {}

};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

round3 = function(x) {
  return Math.round(x * 1000) / 1000;
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (h > 0) {
    header += round3(h) + 'h';
  }
  if (m > 0) {
    header += round3(m) + 'm';
  }
  if (s > 0) {
    header += round3(s) + 's';
  }
  return header;
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.log(d2(3), '03');

hms = function(x) {
  var h, m, s;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  return [h, m, s];
};

console.log(hms(180), [0, 3, 0]);

//##################################
StartState = class StartState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('left right play=>LeftOrRight new=>Editor');
  }

};

LeftOrRight = class LeftOrRight extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('left=>RightTicking right=>LeftTicking pause=>StartState');
  }

};

LeftTicking = class LeftTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('right left=>RightTicking pause=>LeftPaused');
  }

  draw() {
    console.log('LeftTicking');
    if (!timeout[0]) {
      states.Editor.clocks[0] -= 1 / 60;
    }
    if (states.Editor.clocks[0] <= 0) {
      states.Editor.clocks[0] = 0;
      timeout[0] = true;
      console.log(timeout);
    }
    buttons.left.fg = 'white';
    buttons.right.fg = 'black';
    return super.draw();
  }

  message(key) {
    if (key === 'left') {
      if (!timeout[0]) {
        states.Editor.clocks[0] += states.Editor.bonuses[0];
      }
      buttons.left.fg = 'white';
      buttons.right.fg = 'black';
    }
    return super.message(key);
  }

};

RightTicking = class RightTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('left right=>LeftTicking pause=>RightPaused');
  }

  draw() {
    console.log('RightTicking');
    if (!timeout[1]) {
      states.Editor.clocks[1] -= 1 / 60;
    }
    if (states.Editor.clocks[1] <= 0) {
      states.Editor.clocks[1] = 0;
      timeout[1] = true;
      console.log(timeout);
    }
    buttons.left.fg = 'black';
    buttons.right.fg = 'white';
    return super.draw();
  }

  message(key) {
    if (key === 'right') {
      if (!timeout[1]) {
        states.Editor.clocks[1] += states.Editor.bonuses[1];
      }
      buttons.left.fg = 'black';
      buttons.right.fg = 'white';
    }
    return super.message(key);
  }

};

LeftPaused = class LeftPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('left right play=>LeftTicking new=>Editor');
  }

};

RightPaused = class RightPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('left right play=>RightTicking new=>Editor');
  }

};

Editor = class Editor extends State {
  constructor(name1) {
    var arr, i, j, k, l, len, len1, letter, name, ref, ref1;
    super();
    this.name = name1;
    this.sums = [0, 1 + 2, 0, 0, 2, 0];
    this.clocks = [
      3 * 60,
      3 * 60 // seconds
    ];
    this.bonuses = [
      2,
      2 // seconds
    ];
    buttons.b0.fg = 'yellow';
    buttons.b1.fg = 'yellow';
    buttons.e1.fg = 'yellow';
    buttons.white.text = '3m + 2s';
    this.hcpSwap = 1;
    arr = 'red white green reflection bonus hcp ok=>StartState swap=>Editor'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'abcdef'[i];
      arr.push(letter);
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        name = letter + j;
        arr.push(name + '=>Editor');
      }
    }
    this.createTrans(arr.join(' '));
    console.log(arr.join(' '));
  }

  message(key) {
    var i, j, letter, number;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    }
    if (key !== 'swap' && key !== 'ok') {
      buttons[key].fg = buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      i = 'abcdef'.indexOf(letter);
      j = key[1];
      number = [1, 2, 4, 8, 15, 30][j];
      this.sums[i] = buttons[key].fg === 'gray' ? this.sums[i] - number : this.sums[i] + number;
    }
    if (key === 'ok') {
      timeout = [false, false];
      buttons.left.fg = 'black';
      buttons.right.fg = 'black';
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      buttons.red.text = '';
      return buttons.green.text = '';
    } else {
      buttons.red.text = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      return buttons.green.text = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'h m s m s t'.split(' ');
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / 60; // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

makeEditButtons = function() {
  var i, j, k, len, letter, name, number, ref, results, shown, size, xoff, yoff;
  ref = range(6);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    letter = 'abcdef'[i];
    size = 0.13 * width;
    xoff = size / 2 + (width - 6 * size) / 2;
    yoff = 0.33 * height;
    shown = 'h m s m s t'.split(' ');
    buttons[letter] = new DeadButton(shown[i], xoff + size * i, 0.26 * height);
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(6);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + j;
        results1.push(buttons[name] = new EditButton(number, xoff + size * i, yoff + size * j, size, size, 'gray'));
      }
      return results1;
    })());
  }
  return results;
};

setup = function() {
  var h, w;
  createCanvas(screen.width, screen.height);
  //createCanvas innerWidth,innerHeight
  //createCanvas 600,900
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  w = width;
  h = height;
  // Main Page
  buttons.left = new RotateButton(0.5 * w, 0.22 * h, w, 0.44 * h, 180, 'red', 'black', 0); // eg up
  buttons.right = new RotateButton(0.5 * w, 0.78 * h, w, 0.44 * h, 0, 'green', 'black', 1); // eg down
  buttons.play = new Button('play', 0.2 * w, 0.50 * h, 0.4 * w, 0.12 * h);
  buttons.pause = new Button('pause', 0.2 * w, 0.50 * h, 0.4 * w, 0.12 * h);
  buttons.new = new Button('new', 0.8 * w, 0.50 * h, 0.4 * w, 0.12 * h);
  
  // Edit Page
  buttons.swap = new Button('swap', 0.33 * w, 0.93 * h, 0.14 * w, 0.09 * h);
  buttons.ok = new Button('ok', 0.67 * w, 0.93 * h, 0.14 * w, 0.09 * h);
  buttons.red = new ColorButton('red', w / 2, 0.03 * h);
  buttons.white = new ColorButton('white', w / 2, 0.09 * h);
  buttons.green = new ColorButton('green', w / 2, 0.15 * h);
  buttons.reflection = new DeadButton('reflection', 0.30 * w, 0.21 * h);
  buttons.bonus = new DeadButton('bonus', 0.63 * w, 0.21 * h);
  buttons.hcp = new DeadButton('hcp', 0.83 * w, 0.21 * h);
  makeEditButtons();
  console.log(buttons);
  createState('StartState', StartState);
  createState('LeftOrRight', LeftOrRight);
  createState('Editor', Editor);
  createState('LeftTicking', LeftTicking);
  createState('RightTicking', RightTicking);
  createState('LeftPaused', LeftPaused);
  createState('RightPaused', RightPaused);
  currState = states.StartState;
  return console.log('currState', currState);
};

draw = function() {
  var key, target;
  background('black');
  for (key in currState.transitions) {
    target = currState.transitions[key];
    if (key in buttons) {
      buttons[key].draw(target === void 0);
    } else {
      console.log('missing button:', key);
    }
  }
  // debug
  // text currState.name,0.5*width,0.03*height
  // fill 'green'
  // text round3(states.Editor.bonuses[0]),0.1*width,0.03*height
  // text round3(states.Editor.clocks[0]),0.25*width,0.03*height
  // text round3(states.Editor.clocks[1]),0.75*width,0.03*height
  // text round3(states.Editor.bonuses[1]),0.9*width,0.03*height
  return currState.draw();
};

mouseClicked = function() {
  var key, results;
  toggleFullScreen();
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === void 0) {
      continue;
    }
    console.log(key);
    if (buttons[key].inside(mouseX, mouseY)) {
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsTUFBQSxFQUFBLFdBQUEsRUFBQSxZQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsZUFBQSxFQUFBLFlBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQTtFQUFBOztBQUFBLElBQUEsR0FBTzs7QUFDUCxNQUFBLEdBQVM7O0FBRVQsT0FBQSxHQUFVLENBQUE7O0FBQ1YsTUFBQSxHQUFTLENBQUE7O0FBRVQsT0FBQSxHQUFVLENBQUMsS0FBRCxFQUFPLEtBQVA7O0FBRVYsU0FBQSxHQUFZOztBQUVOLFNBQU4sTUFBQSxPQUFBO0VBQ0MsV0FBYyxNQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsUUFBdUIsT0FBdkIsUUFBbUMsT0FBbkMsQ0FBQTtJQUFDLElBQUMsQ0FBQTtJQUFLLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFXLElBQUMsQ0FBQTtFQUFoQzs7RUFDZCxJQUFPLENBQUMsUUFBRCxDQUFBO0lBQ04sSUFBRyxRQUFIO01BQWlCLElBQUEsQ0FBSyxXQUFMLEVBQWpCO0tBQUEsTUFBQTtNQUF1QyxJQUFBLENBQUssSUFBQyxDQUFBLEVBQU4sRUFBdkM7O0lBQ0EsSUFBQSxDQUFLLElBQUMsQ0FBQSxDQUFOLEVBQVEsSUFBQyxDQUFBLENBQVQsRUFBVyxJQUFDLENB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QVksWUFBWixFQUEyQixVQUEzQjtFQUNBLFdBQUEsQ0FBWSxhQUFaLEVBQTJCLFdBQTNCO0VBRUEsU0FBQSxHQUFZLE1BQU0sQ0FBQztTQUNuQixPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosRUFBd0IsU0FBeEI7QUE1Q087O0FBOENSLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsR0FBQSxFQUFBO0VBQUMsVUFBQSxDQUFXLE9BQVg7RUFFQSxLQUFBLDRCQUFBO0lBQ0MsTUFBQSxHQUFTLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRDtJQUM5QixJQUFHLEdBQUEsSUFBTyxPQUFWO01BQXVCLE9BQU8sQ0FBQyxHQUFELENBQUssQ0FBQyxJQUFiLENBQWtCLE1BQUEsS0FBVSxNQUE1QixFQUF2QjtLQUFBLE1BQUE7TUFDSyxPQUFPLENBQUMsR0FBUixDQUFZLGlCQUFaLEVBQThCLEdBQTlCLEVBREw7O0VBRkQsQ0FGRDs7Ozs7Ozs7U0FjQyxTQUFTLENBQUMsSUFBVixDQUFBO0FBZk07O0FBaUJQLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUNmLE1BQUEsR0FBQSxFQUFBO0VBQUMsZ0JBQUEsQ0FBQTtBQUNBO0VBQUEsS0FBQSw0QkFBQTtJQUNDLElBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFELENBQXJCLEtBQThCLE1BQWpDO0FBQWdELGVBQWhEOztJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWjtJQUNBLElBQUcsT0FBTyxDQUFDLEdBQUQsQ0FBSyxDQUFDLE1BQWIsQ0FBb0IsTUFBcEIsRUFBNEIsTUFBNUIsQ0FBSDtNQUNDLFNBQVMsQ0FBQyxPQUFWLENBQWtCLEdBQWxCO0FBQ0EsWUFGRDtLQUFBLE1BQUE7MkJBQUE7O0VBSEQsQ0FBQTs7QUFGYyIsInNvdXJjZXNDb250ZW50IjpbIkhPVVIgPSAzNjAwXHJcbk1JTlVURSA9IDYwXHJcblxyXG5idXR0b25zID0ge31cclxuc3RhdGVzID0ge31cclxuXHJcbnRpbWVvdXQgPSBbZmFsc2UsZmFsc2VdXHJcblxyXG5jdXJyU3RhdGUgPSBudWxsXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAdGV4dCxAeCxAeSxAdyxAaCxAYmc9J3doaXRlJyxAZmc9J2JsYWNrJykgLT5cclxuXHRkcmF3IDogKGRpc2FibGVkKSAtPlxyXG5cdFx0aWYgZGlzYWJsZWQgdGhlbiBmaWxsICdsaWdodGdyYXknIGVsc2UgZmlsbCBAYmdcclxuXHRcdHJlY3QgQHgsQHksQHcsQGhcclxuXHRcdHRleHRTaXplIDAuMDQqaGVpZ2h0XHJcblx0XHRmaWxsIEBmZ1xyXG5cdFx0dGV4dCBAdGV4dCxAeCxAeVxyXG5cdGluc2lkZSA6IC0+IC1Ady8yIDw9IG1vdXNlWC1AeCA8PSBAdy8yIGFuZCAtQGgvMiA8PSBtb3VzZVktQHkgPD0gQGgvMlxyXG5cclxuY2xhc3MgUm90YXRlQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCxAZGVncmVlcyxiZyxmZyxAcGxheWVyKSAtPlxyXG5cdFx0c3VwZXIgJycseCx5LHcsaCxiZyxmZ1xyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHNlY3MgPSBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1tAcGxheWVyXVxyXG5cdFx0aWYgc2VjcyA9PSAwIHRoZW4gZmlsbCAnZ3JheSdcclxuXHRcdFtoLG0sc10gPSBobXMgTWF0aC50cnVuYyBzZWNzXHJcblx0XHRzcyA9IGlmIGggPj0gMSB0aGVuIGQyKGgpICsgJzonICsgZDIobSkgZWxzZSBkMihtKSArICc6JyArIGQyKHMpXHJcblxyXG5cdFx0ZmlsbCBAYmdcclxuXHRcdHJlY3QgQHgsQHksQHcsQGhcclxuXHJcblx0XHRwdXNoKClcclxuXHRcdHRyYW5zbGF0ZSBAeCxAeVxyXG5cdFx0cm90YXRlIEBkZWdyZWVzXHJcblx0XHR0ZXh0U2l6ZSAwLjIyKmhlaWdodFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgc3MsMCwwLjAxNypoZWlnaHRcclxuXHRcdHRleHRTaXplIDAuMDUqaGVpZ2h0XHJcblx0XHR0ZXh0ICcrJyArIHJvdW5kMyhzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbQHBsYXllcl0pKydzJywwLDkwXHJcblx0XHRpZiB0aW1lb3V0W0BwbGF5ZXJdIHRoZW4gdGV4dCAnT3V0IG9mIHRpbWUnLDAsLTkwXHJcblx0XHRwb3AoKVxyXG5cclxuY2xhc3MgRWRpdEJ1dHRvbiBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHRleHQseCx5LHcsaCxmZz0nZ3JheScpIC0+XHJcblx0XHRzdXBlciB0ZXh0LHgseSx3LGgsJ2JsYWNrJyxmZ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0dGV4dFNpemUgMC4wNSpoZWlnaHRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblxyXG5jbGFzcyBEZWFkQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAodGV4dCx4LHksZmc9J2xpZ2h0Z3JheScpIC0+XHJcblx0XHRzdXBlciB0ZXh0LHgseSwwLDAsJ2JsYWNrJyxmZ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0dGV4dFNpemUgMC4wNSpoZWlnaHRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblxyXG5jbGFzcyBDb2xvckJ1dHRvbiBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEBmZyx4LHkpIC0+XHJcblx0XHRzdXBlciAnJyx4LHksMCwwXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHR0ZXh0U2l6ZSAwLjA0KmhlaWdodFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRcdHBvcCgpXHJcblxyXG5jbGFzcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogLT4gQHRyYW5zaXRpb25zID0ge31cclxuXHRjcmVhdGVUcmFucyA6ICh0KSAtPiBcclxuXHRcdGFyciA9IHQuc3BsaXQgJyAnXHJcblx0XHRmb3IgcGFpciBpbiBhcnJcclxuXHRcdFx0W2tleSx0YXJnZXRdID0gcGFpci5zcGxpdCAnPT4nXHJcblx0XHRcdEB0cmFuc2l0aW9uc1trZXldID0gdGFyZ2V0XHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRjb25zb2xlLmxvZyBcImNsaWNrZWQgI3tAbmFtZX0uI3trZXl9ID0+ICN7QHRyYW5zaXRpb25zW2tleV19XCJcclxuXHRcdGlmIGtleSBvZiBAdHJhbnNpdGlvbnNcclxuXHRcdFx0Y3VyclN0YXRlID0gc3RhdGVzW0B0cmFuc2l0aW9uc1trZXldXVxyXG5cdFx0XHRjdXJyU3RhdGUucGF0Y2goKVxyXG5cdFx0ZWxzZSBjb25zb2xlLmxvZyAnbWlzc2luZyB0cmFuc2l0aW9uOicsa2V5XHJcblx0cGF0Y2ggOiAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cclxuY3JlYXRlU3RhdGUgPSAoa2V5LGtsYXNzKSAtPiBzdGF0ZXNba2V5XSA9IG5ldyBrbGFzcyBrZXlcclxuXHJcbnJvdW5kMyA9ICh4KSAtPiBNYXRoLnJvdW5kKHgqMTAwMCkvMTAwMFxyXG5cclxucHJldHR5ID0gKHRvdCkgLT5cclxuXHRzID0gdG90ICUgNjBcclxuXHR0b3QgPSAodG90IC0gcykgLyA2MFxyXG5cdG0gPSB0b3QgJSA2MFxyXG5cdHRvdCA9ICh0b3QgLSBtKSAvIDYwXHJcblx0aCA9IHRvdCAlIDYwXHJcblx0aGVhZGVyID0gJydcclxuXHRpZiBoPjAgdGhlbiBoZWFkZXIgKz0gcm91bmQzKGgpICsgJ2gnXHJcblx0aWYgbT4wIHRoZW4gaGVhZGVyICs9IHJvdW5kMyhtKSArICdtJ1xyXG5cdGlmIHM+MCB0aGVuIGhlYWRlciArPSByb3VuZDMocykgKyAncydcclxuXHRoZWFkZXJcclxuXHJcbmQyID0gKHgpIC0+XHJcblx0eCA9IE1hdGgudHJ1bmMgeFxyXG5cdGlmIHggPCAxMCB0aGVuICcwJyt4IGVsc2UgeFxyXG5jb25zb2xlLmxvZyBkMigzKSwgJzAzJ1xyXG5cclxuaG1zID0gKHgpIC0+XHJcblx0cyA9IHggJSUgNjBcclxuXHR4ID0geCAvLyA2MFxyXG5cdG0gPSB4ICUlIDYwXHJcblx0eCA9IHggLy8gNjBcclxuXHRoID0geFxyXG5cdFtoLG0sc11cclxuY29uc29sZS5sb2cgaG1zKDE4MCksIFswLDMsMF1cclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG5jbGFzcyBTdGFydFN0YXRlIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBjcmVhdGVUcmFucyAnbGVmdCByaWdodCBwbGF5PT5MZWZ0T3JSaWdodCBuZXc9PkVkaXRvcidcclxuXHJcbmNsYXNzIExlZnRPclJpZ2h0IGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBjcmVhdGVUcmFucyAnbGVmdD0+UmlnaHRUaWNraW5nIHJpZ2h0PT5MZWZ0VGlja2luZyBwYXVzZT0+U3RhcnRTdGF0ZSdcclxuXHJcbmNsYXNzIExlZnRUaWNraW5nIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBjcmVhdGVUcmFucyAncmlnaHQgbGVmdD0+UmlnaHRUaWNraW5nIHBhdXNlPT5MZWZ0UGF1c2VkJ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0Y29uc29sZS5sb2cgJ0xlZnRUaWNraW5nJ1xyXG5cdFx0aWYgbm90IHRpbWVvdXRbMF0gdGhlbiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSAtPSAxLzYwXHJcblx0XHRpZiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSA8PSAwIFxyXG5cdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSA9IDBcclxuXHRcdFx0dGltZW91dFswXSA9IHRydWVcclxuXHRcdFx0Y29uc29sZS5sb2cgdGltZW91dFxyXG5cdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ3doaXRlJ1xyXG5cdFx0YnV0dG9ucy5yaWdodC5mZyA9ICdibGFjaydcclxuXHRcdHN1cGVyKClcclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHRcdGlmIGtleSA9PSAnbGVmdCdcclxuXHRcdFx0aWYgbm90IHRpbWVvdXRbMF1cclxuXHRcdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSArPSBzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbMF1cclxuXHRcdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ3doaXRlJ1xyXG5cdFx0XHRidXR0b25zLnJpZ2h0LmZnID0gJ2JsYWNrJ1xyXG5cdFx0c3VwZXIga2V5XHJcblxyXG5jbGFzcyBSaWdodFRpY2tpbmcgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QGNyZWF0ZVRyYW5zICdsZWZ0IHJpZ2h0PT5MZWZ0VGlja2luZyBwYXVzZT0+UmlnaHRQYXVzZWQnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRjb25zb2xlLmxvZyAnUmlnaHRUaWNraW5nJ1xyXG5cdFx0aWYgbm90IHRpbWVvdXRbMV0gdGhlbiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSAtPSAxLzYwXHJcblx0XHRpZiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSA8PSAwIFxyXG5cdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSA9IDBcclxuXHRcdFx0dGltZW91dFsxXSA9IHRydWVcclxuXHRcdFx0Y29uc29sZS5sb2cgdGltZW91dFxyXG5cdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ2JsYWNrJ1xyXG5cdFx0YnV0dG9ucy5yaWdodC5mZyA9ICd3aGl0ZSdcclxuXHRcdHN1cGVyKClcclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHRcdGlmIGtleSA9PSAncmlnaHQnXHJcblx0XHRcdGlmIG5vdCB0aW1lb3V0WzFdXHJcblx0XHRcdFx0c3RhdGVzLkVkaXRvci5jbG9ja3NbMV0gKz0gc3RhdGVzLkVkaXRvci5ib251c2VzWzFdXHJcblx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuXHRcdFx0YnV0dG9ucy5yaWdodC5mZyA9ICd3aGl0ZSdcclxuXHRcdHN1cGVyIGtleVxyXG5cclxuY2xhc3MgTGVmdFBhdXNlZCBleHRlbmRzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlcigpXHJcblx0XHRAY3JlYXRlVHJhbnMgJ2xlZnQgcmlnaHQgcGxheT0+TGVmdFRpY2tpbmcgbmV3PT5FZGl0b3InXHJcblxyXG5jbGFzcyBSaWdodFBhdXNlZCBleHRlbmRzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlcigpXHJcblx0XHRAY3JlYXRlVHJhbnMgJ2xlZnQgcmlnaHQgcGxheT0+UmlnaHRUaWNraW5nIG5ldz0+RWRpdG9yJ1xyXG5cclxuY2xhc3MgRWRpdG9yIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBzdW1zID0gWzAsMSsyLDAsMCwyLDBdXHJcblxyXG5cdFx0QGNsb2NrcyA9IFszKjYwLDMqNjBdICMgc2Vjb25kc1xyXG5cdFx0QGJvbnVzZXMgPSBbMiwyXSAjIHNlY29uZHNcclxuXHRcdGJ1dHRvbnMuYjAuZmcgPSAneWVsbG93J1xyXG5cdFx0YnV0dG9ucy5iMS5mZyA9ICd5ZWxsb3cnXHJcblx0XHRidXR0b25zLmUxLmZnID0gJ3llbGxvdydcclxuXHRcdGJ1dHRvbnMud2hpdGUudGV4dCA9ICczbSArIDJzJ1xyXG5cclxuXHRcdEBoY3BTd2FwID0gMVxyXG5cdFx0YXJyID0gJ3JlZCB3aGl0ZSBncmVlbiByZWZsZWN0aW9uIGJvbnVzIGhjcCBvaz0+U3RhcnRTdGF0ZSBzd2FwPT5FZGl0b3InLnNwbGl0ICcgJ1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0XHRsZXR0ZXIgPSAnYWJjZGVmJ1tpXVxyXG5cdFx0XHRhcnIucHVzaCBsZXR0ZXJcclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgNlxyXG5cdFx0XHRcdG5hbWUgPSBsZXR0ZXIgKyBqXHJcblx0XHRcdFx0YXJyLnB1c2ggbmFtZSArICc9PkVkaXRvcidcclxuXHRcdEBjcmVhdGVUcmFucyBhcnIuam9pbiAnICdcclxuXHRcdGNvbnNvbGUubG9nIGFyci5qb2luICcgJ1xyXG5cclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHRcdGlmIGtleSA9PSAnc3dhcCdcclxuXHRcdFx0QGhjcFN3YXAgPSAtQGhjcFN3YXBcclxuXHRcdGlmIGtleSAhPSAnc3dhcCcgYW5kIGtleSAhPSAnb2snXHJcblx0XHRcdGJ1dHRvbnNba2V5XS5mZyA9IGlmIGJ1dHRvbnNba2V5XS5mZyA9PSAnZ3JheScgdGhlbiAneWVsbG93JyBlbHNlICdncmF5J1xyXG5cdFx0XHRsZXR0ZXIgPSBrZXlbMF1cclxuXHRcdFx0aSA9ICdhYmNkZWYnLmluZGV4T2YgbGV0dGVyXHJcblx0XHRcdGogPSBrZXlbMV1cclxuXHRcdFx0bnVtYmVyID0gWzEsMiw0LDgsMTUsMzBdW2pdXHJcblx0XHRcdEBzdW1zW2ldID0gaWYgYnV0dG9uc1trZXldLmZnID09ICdncmF5JyB0aGVuIEBzdW1zW2ldLW51bWJlciBlbHNlIEBzdW1zW2ldK251bWJlclxyXG5cdFx0aWYga2V5ID09ICdvaycgXHJcblx0XHRcdHRpbWVvdXQgPSBbZmFsc2UsZmFsc2VdXHJcblx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuXHRcdFx0YnV0dG9ucy5yaWdodC5mZyA9ICdibGFjaydcclxuXHRcdEB1cHBkYXRlcmEoKVxyXG5cdFx0c3VwZXIga2V5XHJcblxyXG5cdHVwcGRhdGVyYSA6IC0+XHJcblx0XHRidXR0b25zLndoaXRlLnRleHQgPSBAY29tcGFjdCgpXHJcblx0XHRAaGFuZGljYXAoKVxyXG5cdFx0aWYgQGhjcCA9PSAwXHJcblx0XHRcdGJ1dHRvbnMucmVkLnRleHQgICA9ICcnXHJcblx0XHRcdGJ1dHRvbnMuZ3JlZW4udGV4dCA9ICcnXHJcblx0XHRlbHNlXHJcblx0XHRcdGJ1dHRvbnMucmVkLnRleHQgICA9IHByZXR0eShAcGxheWVyc1swXVswXSkgKyAnICsgJyArIHByZXR0eShAcGxheWVyc1swXVsxXSlcclxuXHRcdFx0YnV0dG9ucy5ncmVlbi50ZXh0ID0gcHJldHR5KEBwbGF5ZXJzWzFdWzBdKSArICcgKyAnICsgcHJldHR5KEBwbGF5ZXJzWzFdWzFdKVxyXG5cclxuXHRjb21wYWN0IDogLT5cclxuXHRcdGhlYWRlcnMgPSAnaCBtIHMgbSBzIHQnLnNwbGl0ICcgJ1xyXG5cdFx0aGVhZGVyMCA9ICcnXHJcblx0XHRoZWFkZXIxID0gJydcclxuXHRcdGZvciBpIGluIHJhbmdlIDAsM1xyXG5cdFx0XHRpZiBAc3Vtc1tpXT4wIHRoZW4gaGVhZGVyMCArPSBAc3Vtc1tpXSArIGhlYWRlcnNbaV1cclxuXHRcdGZvciBpIGluIHJhbmdlIDMsNVxyXG5cdFx0XHRpZiBAc3Vtc1tpXT4wIHRoZW4gaGVhZGVyMSArPSBAc3Vtc1tpXSArIGhlYWRlcnNbaV1cclxuXHRcdGhlYWRlciA9IGhlYWRlcjBcclxuXHRcdGlmIGhlYWRlcjEubGVuZ3RoID4gMCB0aGVuIGhlYWRlciArPSAnICsgJyArIGhlYWRlcjFcclxuXHRcdGhlYWRlclxyXG5cclxuXHRoYW5kaWNhcCA6IC0+XHJcblx0XHRAaGNwID0gQGhjcFN3YXAgKiBAc3Vtc1s1XS82MCAjIDAuMCAuLiAxLjBcclxuXHRcdEByZWZsID0gSE9VUiAqIEBzdW1zWzBdICsgTUlOVVRFICogQHN1bXNbMV0gKyBAc3Vtc1syXSAjIHNla3VuZGVyXHJcblx0XHRAYm9udXMgPSAgICAgICAgICAgICAgICAgIE1JTlVURSAqIEBzdW1zWzNdICsgQHN1bXNbNF0gIyBzZWt1bmRlclxyXG5cdFx0QHBsYXllcnMgPSBbXVxyXG5cdFx0QHBsYXllcnNbMF0gPSBbQHJlZmwqKDErQGhjcCksIEBib251cyooMStAaGNwKV1cclxuXHRcdEBwbGF5ZXJzWzFdID0gW0ByZWZsKigxLUBoY3ApLCBAYm9udXMqKDEtQGhjcCldXHJcblx0XHRAY2xvY2tzICA9IFtAcGxheWVyc1swXVswXSwgQHBsYXllcnNbMV1bMF1dXHJcblx0XHRAYm9udXNlcyA9IFtAcGxheWVyc1swXVsxXSwgQHBsYXllcnNbMV1bMV1dXHJcblxyXG5tYWtlRWRpdEJ1dHRvbnMgPSAtPlxyXG5cdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdGxldHRlciA9ICdhYmNkZWYnW2ldXHJcblx0XHRzaXplID0gMC4xMyp3aWR0aFxyXG5cdFx0eG9mZiA9IHNpemUvMiArICh3aWR0aC02KnNpemUpLzJcclxuXHRcdHlvZmYgPSAwLjMzKmhlaWdodFxyXG5cdFx0c2hvd249J2ggbSBzIG0gcyB0Jy5zcGxpdCAnICdcclxuXHRcdGJ1dHRvbnNbbGV0dGVyXSA9IG5ldyBEZWFkQnV0dG9uIHNob3duW2ldLCB4b2ZmK3NpemUqaSwgMC4yNipoZWlnaHQgXHJcblx0XHRmb3IgaiBpbiByYW5nZSA2XHJcblx0XHRcdG51bWJlciA9IFsxLDIsNCw4LDE1LDMwXVtqXVxyXG5cdFx0XHRuYW1lID0gbGV0dGVyICsgalxyXG5cdFx0XHRidXR0b25zW25hbWVdID0gbmV3IEVkaXRCdXR0b24gbnVtYmVyLCB4b2ZmK3NpemUqaSwgeW9mZitzaXplKmosIHNpemUsIHNpemUsICdncmF5J1xyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyBzY3JlZW4ud2lkdGgsc2NyZWVuLmhlaWdodFxyXG5cdCNjcmVhdGVDYW52YXMgaW5uZXJXaWR0aCxpbm5lckhlaWdodFxyXG5cdCNjcmVhdGVDYW52YXMgNjAwLDkwMFxyXG5cclxuXHRiYWNrZ3JvdW5kICdibGFjaydcclxuXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRyZWN0TW9kZSBDRU5URVJcclxuXHRhbmdsZU1vZGUgREVHUkVFU1xyXG5cclxuXHR3ID0gd2lkdGhcclxuXHRoID0gaGVpZ2h0XHJcblxyXG5cdCMgTWFpbiBQYWdlXHJcblx0YnV0dG9ucy5sZWZ0ICA9IG5ldyBSb3RhdGVCdXR0b24gMC41KncsIDAuMjIqaCwgdywgICAgIDAuNDQqaCwgMTgwLCAncmVkJywgICdibGFjaycsIDAgIyBlZyB1cFxyXG5cdGJ1dHRvbnMucmlnaHQgPSBuZXcgUm90YXRlQnV0dG9uIDAuNSp3LCAwLjc4KmgsIHcsICAgICAwLjQ0KmgsICAgMCwgJ2dyZWVuJywnYmxhY2snLCAxICMgZWcgZG93blxyXG5cdGJ1dHRvbnMucGxheSAgPSBuZXcgQnV0dG9uICdwbGF5JywgIDAuMip3LCAwLjUwKmgsIDAuNCp3LCAwLjEyKmhcclxuXHRidXR0b25zLnBhdXNlID0gbmV3IEJ1dHRvbiAncGF1c2UnLCAwLjIqdywgMC41MCpoLCAwLjQqdywgMC4xMipoXHJcblx0YnV0dG9ucy5uZXcgICA9IG5ldyBCdXR0b24gJ25ldycsICAgMC44KncsIDAuNTAqaCwgMC40KncsIDAuMTIqaFxyXG5cdFxyXG5cdCMgRWRpdCBQYWdlXHJcblx0YnV0dG9ucy5zd2FwICA9IG5ldyBCdXR0b24gJ3N3YXAnLCAwLjMzKncsIDAuOTMqaCwgMC4xNCp3LCAwLjA5KmhcclxuXHRidXR0b25zLm9rICAgID0gbmV3IEJ1dHRvbiAnb2snLCAgIDAuNjcqdywgMC45MypoLCAwLjE0KncsIDAuMDkqaFxyXG5cdGJ1dHRvbnMucmVkICAgPSBuZXcgQ29sb3JCdXR0b24gJ3JlZCcsICAgdy8yLCAwLjAzKmhcclxuXHRidXR0b25zLndoaXRlID0gbmV3IENvbG9yQnV0dG9uICd3aGl0ZScsIHcvMiwgMC4wOSpoXHJcblx0YnV0dG9ucy5ncmVlbiA9IG5ldyBDb2xvckJ1dHRvbiAnZ3JlZW4nLCB3LzIsIDAuMTUqaFxyXG5cdGJ1dHRvbnMucmVmbGVjdGlvbiA9IG5ldyBEZWFkQnV0dG9uICdyZWZsZWN0aW9uJywgMC4zMCp3LCAwLjIxKmhcclxuXHRidXR0b25zLmJvbnVzID0gbmV3IERlYWRCdXR0b24gJ2JvbnVzJywgMC42Myp3LCAwLjIxKmhcclxuXHRidXR0b25zLmhjcCAgID0gbmV3IERlYWRCdXR0b24gJ2hjcCcsIDAuODMqdywgMC4yMSpoXHJcblxyXG5cdG1ha2VFZGl0QnV0dG9ucygpXHJcblxyXG5cdGNvbnNvbGUubG9nIGJ1dHRvbnNcclxuXHJcblx0Y3JlYXRlU3RhdGUgJ1N0YXJ0U3RhdGUnLCAgU3RhcnRTdGF0ZVxyXG5cdGNyZWF0ZVN0YXRlICdMZWZ0T3JSaWdodCcsIExlZnRPclJpZ2h0XHJcblx0Y3JlYXRlU3RhdGUgJ0VkaXRvcicsICAgICAgRWRpdG9yXHJcblx0Y3JlYXRlU3RhdGUgJ0xlZnRUaWNraW5nJywgTGVmdFRpY2tpbmdcclxuXHRjcmVhdGVTdGF0ZSAnUmlnaHRUaWNraW5nJyxSaWdodFRpY2tpbmdcclxuXHRjcmVhdGVTdGF0ZSAnTGVmdFBhdXNlZCcsICBMZWZ0UGF1c2VkXHJcblx0Y3JlYXRlU3RhdGUgJ1JpZ2h0UGF1c2VkJywgUmlnaHRQYXVzZWRcclxuXHJcblx0Y3VyclN0YXRlID0gc3RhdGVzLlN0YXJ0U3RhdGVcclxuXHRjb25zb2xlLmxvZyAnY3VyclN0YXRlJyxjdXJyU3RhdGVcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGJhY2tncm91bmQgJ2JsYWNrJ1xyXG5cclxuXHRmb3Iga2V5IG9mIGN1cnJTdGF0ZS50cmFuc2l0aW9uc1xyXG5cdFx0dGFyZ2V0ID0gY3VyclN0YXRlLnRyYW5zaXRpb25zW2tleV1cclxuXHRcdGlmIGtleSBvZiBidXR0b25zIHRoZW4gYnV0dG9uc1trZXldLmRyYXcgdGFyZ2V0ID09IHVuZGVmaW5lZFxyXG5cdFx0ZWxzZSBjb25zb2xlLmxvZyAnbWlzc2luZyBidXR0b246JyxrZXlcclxuXHJcblx0IyBkZWJ1Z1xyXG5cdCMgdGV4dCBjdXJyU3RhdGUubmFtZSwwLjUqd2lkdGgsMC4wMypoZWlnaHRcclxuXHQjIGZpbGwgJ2dyZWVuJ1xyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLkVkaXRvci5ib251c2VzWzBdKSwwLjEqd2lkdGgsMC4wMypoZWlnaHRcclxuXHQjIHRleHQgcm91bmQzKHN0YXRlcy5FZGl0b3IuY2xvY2tzWzBdKSwwLjI1KndpZHRoLDAuMDMqaGVpZ2h0XHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSksMC43NSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLkVkaXRvci5ib251c2VzWzFdKSwwLjkqd2lkdGgsMC4wMypoZWlnaHRcclxuXHRjdXJyU3RhdGUuZHJhdygpXHJcblxyXG5tb3VzZUNsaWNrZWQgPSAtPlxyXG5cdHRvZ2dsZUZ1bGxTY3JlZW4oKVxyXG5cdGZvciBrZXkgb2YgY3VyclN0YXRlLnRyYW5zaXRpb25zXHJcblx0XHRpZiBjdXJyU3RhdGUudHJhbnNpdGlvbnNba2V5XSA9PSB1bmRlZmluZWQgdGhlbiBjb250aW51ZVxyXG5cdFx0Y29uc29sZS5sb2cga2V5XHJcblx0XHRpZiBidXR0b25zW2tleV0uaW5zaWRlIG1vdXNlWCwgbW91c2VZIFxyXG5cdFx0XHRjdXJyU3RhdGUubWVzc2FnZSBrZXlcclxuXHRcdFx0YnJlYWtcclxuIl19
//# sourceURL=c:\github\2022-006-StateLab\coffee\sketch.coffee