// Generated by CoffeeScript 2.5.1
var Button, Editor, LeftOrRight, LeftPaused, LeftTicking, RightPaused, RightTicking, StartState, State, buttons, createState, currState, draw, mouseClicked, setup, states;

buttons = {};

states = {};

currState = null;

Button = class Button {
  constructor(text1, x, y, w, h, bg, fg) {
    this.text = text1;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.bg = bg;
    this.fg = fg;
    this.enabled = true;
  }

  draw() {
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(b, s) {
    return this.transitions[b] = s;
  }

  message(key) {
    if (key in this.transitions) {
      return currState = states[this.transitions[key]];
    } else {
      return console.log('missing transition:', key);
    }
  }

};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

//##################################
StartState = class StartState extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('left', ''); // dead button
    this.createTrans('right', ''); // dead button
    this.createTrans('play', 'LeftOrRight'); // active button
    this.createTrans('new', 'Editor'); // active button
  }

};

LeftOrRight = class LeftOrRight extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('left', 'RightTicking');
    this.createTrans('right', 'LeftTicking');
    this.createTrans('pause', 'StartState');
  }

};

LeftTicking = class LeftTicking extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('left', 'rightTicking');
    this.createTrans('right', '');
    this.createTrans('pause', 'LeftPaused');
  }

};

RightTicking = class RightTicking extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('left', '');
    this.createTrans('right', 'LeftTicking');
    this.createTrans('pause', 'RightPaused');
  }

};

LeftPaused = class LeftPaused extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('left', '');
    this.createTrans('right', '');
    this.createTrans('play', 'LeftTicking');
    this.createTrans('new', 'Editor');
  }

};

RightPaused = class RightPaused extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('left', '');
    this.createTrans('right', '');
    this.createTrans('play', 'RightTicking');
    this.createTrans('new', 'Editor');
  }

};

Editor = class Editor extends State {
  constructor(name) {
    super();
    this.name = name;
    this.createTrans('ok', 'StartState');
  }

};

setup = function() {
  createCanvas(300, 300);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  buttons.left = new Button('left', 150, 50, 300, 100, 'white', 'black');
  buttons.right = new Button('right', 150, 250, 300, 100, 'red', 'black');
  buttons.play = new Button('play', 50, 150, 100, 100, 'yellow', 'black');
  buttons.pause = new Button('pause', 50, 150, 100, 100, 'green', 'white');
  buttons.new = new Button('new', 250, 150, 100, 100, 'pink', 'black');
  buttons.ok = new Button('ok', 150, 250, 100, 100, 'white', 'black');
  createState('StartState', StartState);
  createState('LeftOrRight', LeftOrRight);
  createState('Editor', Editor);
  createState('LeftTicking', LeftTicking);
  createState('RightTicking', RightTicking);
  createState('LeftPaused', LeftPaused);
  createState('RightPaused', RightPaused);
  currState = states.StartState;
  return console.log(currState);
};

draw = function() {
  var key, results;
  background('black');
  fill('White');
  text(currState.name, 150, 150);
  results = [];
  for (key in currState.transitions) {
    if (key in buttons) {
      results.push(buttons[key].draw());
    } else {
      results.push(console.log('missing button:', key));
    }
  }
  return results;
};

mouseClicked = function() {
  var key, results;
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === '') {
      continue;
    }
    if (buttons[key].inside(mouseX, mouseY)) {
      results.push(currState.message(key));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-006-StateLab\coffee\sketch.coffee