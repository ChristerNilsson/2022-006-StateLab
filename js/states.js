// Generated by CoffeeScript 2.5.1
var Editor, LeftOrRight, LeftPaused, LeftTicking, RightPaused, RightTicking, StartState, State, WelcomeState, makeEditButtons;

State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(t) {
    var arr, k, key, len, pair, results, target;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      pair = arr[k];
      [key, target] = pair.split('=>');
      results.push(this.transitions[key] = target);
    }
    return results;
  }

  message(key) {
    var currState;
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    if (key in this.transitions) {
      currState = states[this.transitions[key]];
      return currState.patch();
    } else {
      return console.log('missing transition:', key);
    }
  }

  patch() {}

  draw() {}

};

WelcomeState = class WelcomeState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('welcome=>StartState');
  }

  message(key) {
    var ok, os;
    if (key === 'welcome') {
      os = navigator.appVersion;
      ok = os.indexOf('Mac') === -1 && os.indexOf('Windows') === -1;
      console.log(ok);
      if (ok) {
        toggleFullScreen();
      }
    }
    return super.message(key);
  }

};

StartState = class StartState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>LeftOrRight new=>Editor');
  }

};

LeftOrRight = class LeftOrRight extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left=>RightTicking right=>LeftTicking pause=>StartState');
  }

  draw() {
    buttons.left.fg = 'white';
    return buttons.right.fg = 'white';
  }

};

LeftTicking = class LeftTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr right left=>RightTicking pause=>LeftPaused');
  }

  draw() {
    if (!timeout[0]) {
      states.Editor.clocks[0] -= 1 / 60;
    }
    if (states.Editor.clocks[0] <= 0) {
      states.Editor.clocks[0] = 0;
      timeout[0] = true;
    }
    buttons.left.fg = 'white';
    buttons.right.fg = 'black';
    return super.draw();
  }

  message(key) {
    if (key === 'left') {
      if (!timeout[0]) {
        states.Editor.clocks[0] += states.Editor.bonuses[0];
      }
      buttons.left.fg = 'white';
      buttons.right.fg = 'black';
    }
    return super.message(key);
  }

};

RightTicking = class RightTicking extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right=>LeftTicking pause=>RightPaused');
  }

  draw() {
    if (!timeout[1]) {
      states.Editor.clocks[1] -= 1 / 60;
    }
    if (states.Editor.clocks[1] <= 0) {
      states.Editor.clocks[1] = 0;
      timeout[1] = true;
    }
    buttons.left.fg = 'black';
    buttons.right.fg = 'white';
    return super.draw();
  }

  message(key) {
    if (key === 'right') {
      if (!timeout[1]) {
        states.Editor.clocks[1] += states.Editor.bonuses[1];
      }
      buttons.left.fg = 'black';
      buttons.right.fg = 'white';
    }
    return super.message(key);
  }

};

LeftPaused = class LeftPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>LeftTicking new=>Editor');
  }

};

RightPaused = class RightPaused extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr left right play=>RightTicking new=>Editor');
  }

};

Editor = class Editor extends State {
  constructor(name1) {
    var arr, i, j, k, l, len, len1, letter, name, ref, ref1;
    super();
    this.name = name1;
    this.sums = [0, 1 + 2, 0, 0, 2, 0];
    this.clocks = [
      3 * 60,
      3 * 60 // seconds
    ];
    this.bonuses = [
      2,
      2 // seconds
    ];
    buttons.b0.fg = 'yellow';
    buttons.b1.fg = 'yellow';
    buttons.e1.fg = 'yellow';
    buttons.white.text = '3m + 2s';
    this.hcpSwap = 1;
    arr = 'red white green reflection bonus hcp ok=>StartState swap=>Editor'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'abcdef'[i];
      arr.push(letter);
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        name = letter + j;
        arr.push(name + '=>Editor');
      }
    }
    this.createTrans(arr.join(' '));
    console.log(arr.join(' '));
  }

  message(key) {
    var i, j, letter, number, timeout;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    }
    if (key !== 'swap' && key !== 'ok') {
      buttons[key].fg = buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      i = 'abcdef'.indexOf(letter);
      j = key[1];
      number = [1, 2, 4, 8, 15, 30][j];
      this.sums[i] = buttons[key].fg === 'gray' ? this.sums[i] - number : this.sums[i] + number;
    }
    if (key === 'ok') {
      timeout = [false, false];
      buttons.left.fg = 'black';
      buttons.right.fg = 'black';
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      buttons.red.text = '';
      return buttons.green.text = '';
    } else {
      buttons.red.text = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      return buttons.green.text = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'h m s m s t'.split(' ');
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / 60; // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

makeEditButtons = function() {
  var i, j, k, len, letter, name, number, ref, results, shown, size, xoff, yoff;
  ref = range(6);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    letter = 'abcdef'[i];
    size = 0.13 * width;
    xoff = size / 2 + (width - 6 * size) / 2;
    yoff = 0.33 * height;
    shown = 'h m s m s t'.split(' ');
    buttons[letter] = new DeadButton(shown[i], xoff + size * i, 0.26 * height);
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(6);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + j;
        results1.push(buttons[name] = new EditButton(number, xoff + size * i, yoff + size * j, size, size, 'gray'));
      }
      return results1;
    })());
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-006-StateLab\coffee\states.coffee